面试题 08.03. 魔术索引
class Solution {
    public int findMagicIndex(int[] nums) {
        for(int i=0;i<nums.length;){
            if(nums[i]==i) return i;
            else if(nums[i]>i) i=nums[i];
            else i++;
        }
        return -1;
    }
}

class Solution {
    public int findMagicIndex(int[] nums) {
        return search(nums,0,nums.length-1);
    }
    public int search(int[] nums,int l,int r){
        if(l>r) return -1;
        int mid=(l+r)/2;
        int left=search(nums,l,mid-1);
        if(left!=-1) return left;
        if(mid==nums[mid]) return mid;
        int right=search(nums,mid+1,r);
        return right;
    }
}

566. 重塑矩阵
class Solution {
    public int[][] matrixReshape(int[][] nums, int r, int c) {
        int n=nums.length,m=nums[0].length;
        if(n*m<r*c) return nums;
        int[][] res=new int[r][c];
        for(int i=0;i<n*m;i++){
            res[i/c][i%c]=nums[i/m][i%m];
        }
        return res;
    }
}

PassingCars  0右边有几个1
class Solution {
    public int solution(int[] A) {
        int cnt=0,cnt0=0;
        for(int i=0;i<A.length;i++){
            if(A[i]==0) cnt0++;
            else cnt+=cnt0;
            if(cnt>1000000000) return -1;
        }
        return cnt;
    }
}

剑指 Offer 61. 扑克牌中的顺子
class Solution {
    public boolean isStraight(int[] nums) {
        Arrays.sort(nums);
        int joker=0;
        for(int i=1;i<5;i++){
            if(nums[i-1]==0) joker++;
            else if(nums[i]==nums[i-1]) return false;
        }
        return nums[4]-nums[joker]<=4;
    }
}

class Solution {
    public boolean isStraight(int[] nums) {
        Set<Integer> set=new HashSet<>();
        int min=14,max=0;
        for(int n:nums){
            if(n==0) continue;
            min=Math.min(min,n);
            max=Math.max(max,n);
            if(set.contains(n)) return false;
            set.add(n);
        }
        return max-min<=4;
    }
}

MaxCounters
class Solution {
    public int[] solution(int N, int[] A) {
        int max=0,pre=0;
        int[] res=new int[N];
        for(int i=0;i<A.length;i++){
            if(A[i]<=N){
                if(res[A[i]-1]<pre) res[A[i]-1]=pre;
                res[A[i]-1]++;
                if(max<res[A[i]-1]) max=res[A[i]-1];
            }
            else if(A[i]==N+1) pre=max;
        }
        for(int i=0;i<N;i++){
            if(res[i]<pre) res[i]=pre;
        }
        return res;
    }
}

MinAvgTwoSlice
//只需查看2或3窗口大小即可, 因为大于3都可以拆分, 拆分子集只有在都相等时才和拆分前相等, 否则一定拆分的子集中有更小的结果
class Solution {
    public int solution(int[] A) {
        double min=100001;
        int idx=-1;
        for(int i=0;i<A.length-1;i++){
            double cur=(A[i]+A[i+1])/2.0;
            if(cur<min){
                min=cur;
                idx=i;
            }
            if(i+2<A.length){
                cur=(A[i]+A[i+1]+A[i+2])/3.0;
                if(cur<min){
                    min=cur;
                    idx=i;
                }
            }
        }
        return idx;
    }
}

485. 最大连续1的个数
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int res=0,cur=0;
        for(int i=0;i<nums.length;i++){
            cur=nums[i]==1?cur+1:0;
            if(cur>res) res=cur;
        }
        return res;
    }
}

cnt = 0
while(x != 0){
  cnt++;
  x &= x<<1;
}

268. 丢失的数字/剑指 Offer 53 - II. 0～n-1中缺失的数字/面试题 17.04. 消失的数字
class Solution {
    public int missingNumber(int[] nums) {
        int l=0,r=nums.length;
        while(l<r) {
            int m=l+(r-l)/2;
            if(nums[m]==m) l=m+1;
            else r=m;
        }
        return l;
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        int sum=0;
        for(int i=1;i<=nums.length;i++){
            sum+=i;
            sum-=nums[i-1];
        }
        return sum;
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        int missing=nums.length;
        for(int i=0;i<nums.length;i++) missing ^= i^nums[i];
        return missing;
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        for(int i=0;i<nums.length;i++){
            while(nums[i]<nums.length&&nums[i]!=i){
                swap(nums,i,nums[i]);
            }
        }
        for(int i=0;i<nums.length;i++) if(nums[i]!=i) return i;
        return nums.length;
    }
    private void swap(int[] nums,int i,int j) {
        int tmp=nums[i];
        nums[i]=nums[j];
        nums[j]=tmp;
    }
}

448. 找到所有数组中消失的数字
//O(n) O(1)
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> res=new ArrayList<>();
        int n=nums.length;
        for(int i=0;i<n;i++){
            int idx=Math.abs(nums[i])-1;
            if(nums[idx]>0) nums[idx]*=-1;
        }
        for(int i=0;i<n;i++){
            if(nums[i]>0) res.add(i+1);
        }
        return res;
    }
}

//快慢指针 二分
287.寻找重复数
//O(n) O(1)
class Solution {
    public int findDuplicate(int[] nums) {
        for(int i=0;i<nums.length;i++){
            int idx=Math.abs(nums[i])-1;
            if(nums[idx]>0) nums[idx]*=-1;
            else return idx+1;
        }
        return 0;
    }
}

217. 存在重复元素
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set=new HashSet<>();
        for(int num:nums) if(!set.add(num)) return true;
        return false;
    }
}

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i=0;i<nums.length-1;i++){
            if(nums[i]==nums[i+1]) return true;
        }
        return false;
    }
}

class Solution {
    public boolean containsDuplicate(int[] nums) {
        return IntStream.of(nums).distinct().count()!=nums.length;
    }
}

剑指 Offer 03. 数组中重复的数字
class Solution {
    public int findRepeatNumber(int[] nums) {
        for(int i=0;i<nums.length;i++){
            while(nums[i]!=i){
                if(nums[i]==nums[nums[i]]) return nums[i];
                swap(nums,i,nums[i]);
            }
        }
        return 0;
    }
    private void swap(int[] nums,int i,int j) {
        int tmp=nums[i];
        nums[i]=nums[j];
        nums[j]=tmp;
    }
}

41. 缺失的第一个正数
//O(n) O(n)
class Solution {
    public int firstMissingPositive(int[] nums) {
        int n=nums.length;
        boolean[] map=new boolean[n];
        for(int i:nums) if(i>0&&i<=n) map[i-1]=true;
        for(int i=0;i<n;i++) if(!map[i]) return i+1;
        return n+1;
    }
}

//O(n) O(1)
class Solution {
    public int firstMissingPositive(int[] nums) {
        int n=nums.length;
        for(int i=0;i<nums.length;i++){
            while(nums[i]>0&&nums[i]<=n&&nums[i]!=nums[nums[i]-1]) swap(nums,i,nums[i]-1);
            //均摊复杂度, 最差第一次while遍历所有元素, 之后不执行, 平均下来每个数只需要遍历一次，while不会被执行很多次
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=i+1) return i+1;
        }
        return n+1;
    }
    private void swap(int[] nums,int i,int j) {
        int tmp=nums[i];
        nums[i]=nums[j];
        nums[j]=tmp;
    }
}

645. 错误的集合
class Solution {
    public int[] findErrorNums(int[] nums) {
        for(int i=0;i<nums.length;i++){
            while(nums[i]!=i+1&&nums[i]!=nums[nums[i]-1]) swap(nums,i,nums[i]-1);
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=i+1) return new int[]{nums[i],i+1};
        }
        return null;
    }
    private void swap(int[] nums,int i,int j) {
        int tmp=nums[i];
        nums[i]=nums[j];
        nums[j]=tmp;
    }
}

class Solution {
    public int[] findErrorNums(int[] nums) {
        int[] res=new int[2];
        for(int i=0;i<nums.length;i++){
            int idx=Math.abs(nums[i])-1;
            if(nums[idx]>0) nums[idx]*=-1;
            else res[0]=idx+1;
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]>0){
                res[1]=i+1;
                break;
            }
        }
        return res;
    }
}

class Solution {
    public int[] findErrorNums(int[] nums) {
        int xor=nums.length;
        for(int i=0;i<nums.length;i++){
            xor^=i;
            xor^=nums[i];
        }
        int a=0;
        int diff=xor&(-xor);
        for(int i=0;i<nums.length;i++){
            if((nums[i]&diff)!=0) a^=nums[i];
            if((i&diff)!=0) a^=i;
        }
        if((nums.length&diff)!=0) a^=nums.length;
        for(int i:nums) if(i==a) return new int[]{a,a^xor};
        return new int[]{a^xor,a};
    }
}

769. 最多能完成排序的块
class Solution {
    public int maxChunksToSorted(int[] arr) {
        if(arr.length==0) return 0;
        int max=0,res=0;
        for(int i=0;i<arr.length;i++){
            max=Math.max(max,arr[i]);
            if(i==max) res++;
        }
        return res;
    }
}

667. 优美的排列 II
class Solution {
    public int[] constructArray(int n, int k) {
        int[] res=new int[n];
        res[0]=1;
        for(int i=1,j=k;i<n;i++,j--){
            if(i<=k) res[i]=i%2==1?res[i-1]+j:res[i-1]-j;
            else res[i]=i+1;
        }
        return res;
    }
}

581. 最短无序连续子数组/最长降序字串
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int l=nums.length,r=0;
        for(int i=0;i<nums.length-1;i++) {
            for(int j=i+1;j<nums.length;j++) {
                if(nums[i]>nums[j]){
                    l=Math.min(l, i);
                    r=Math.max(r, j);
                }
            }
        }
        return r-l<=0?0:r-l+1;
    }
}

class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int res=0,l=nums.length-1,r=0;
        int[] copy=nums.clone();
        Arrays.sort(copy);
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=copy[i]){
                l=Math.min(l,i);
                r=Math.max(r,i);
            }
        }
        return r-l<=0?0:r-l+1;
    }
}

class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int l=0,r=-1;
        int min=nums[nums.length-1],max=nums[0];
        for(int i=0;i<nums.length;i++) {
            if(nums[i]<max) r=i;
            else max=nums[i];

            if(nums[nums.length-1-i]>min) l=nums.length-1-i;
            else min=nums[nums.length-1-i];
        }
        return r-l+1;
    }
}

面试题 16.16. 部分排序
class Solution {
    public int[] subSort(int[] nums) {
        if(nums.length==0) return new int[]{-1,-1};
        int l=-1,r=-1;
        int min=nums[nums.length-1],max=nums[0];
        for(int i=0;i<nums.length;i++) {
            if(nums[i]<max) r=i;
            else max=nums[i];

            if(nums[nums.length-1-i]>min) l=nums.length-1-i;
            else min=nums[nums.length-1-i];
        }
        return new int[]{l,r};
    }
}

179. 最大数
class Solution {
    public String largestNumber(int[] nums) {
        String[] copy=new String[nums.length];
        for(int i=0;i<nums.length;i++) copy[i]=String.valueOf(nums[i]);
        Arrays.sort(copy,(a,b)->(b+a).compareTo(a+b));
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<copy.length;i++) sb.append(copy[i]);
        if(sb.charAt(0)=='0') return "0";
        return sb.toString();
    }
}

剑指 Offer 62. 圆圈中最后剩下的数字  约瑟夫环
//[0,1,2,3,4]剔除2%5, [3,4,0,1]剔除2%4, [1,3,4]剔除2%3, [1,3,1,3]剔除2%2, 剩余3
//反过来推, 最后下标0, 上一轮为1=(0+3)%2, 上一轮为1=(1+3)%3, 上一轮为0=(1+3)%4, 上一轮为3=(0+3)%5
class Solution {
    public int lastRemaining(int n, int m) {
        int res=0;
        for(int i=2;i<=n;i++) res=(res+m)%i;
        return res;
    }
}

565. 数组嵌套
class Solution {
    public int arrayNesting(int[] nums) {
        int max=0;
        for(int i=0;i<nums.length;i++){
            int cnt=0;
            for(int j=i;nums[j]!=-1;){
                int tmp=nums[j];
                nums[j]=-1;
                j=tmp;
                cnt++;
            }
            max=Math.max(max,cnt);
        }
        return max;
    }
}

66. 加一
class Solution {
    public int[] plusOne(int[] digits) {
        for(int i=digits.length-1;i>=0;i--){
            digits[i]++;
            digits[i]=digits[i]%10;
            if(digits[i]!=0) return digits;
        }
        digits=new int[digits.length+1];
        digits[0]=1;
        return digits;
    }
}

697. 数组的度
class Solution {
    public int findShortestSubArray(int[] nums) {
        Map<Integer,int[]> map=new HashMap<>();
        int res=Integer.MAX_VALUE,max=0;
        for(int i=0;i<nums.length;i++){
            if(!map.containsKey(nums[i])) map.put(nums[i],new int[]{1,i});
            else{
                int[] cur=map.get(nums[i]);
                cur[0]++;
                map.put(nums[i],cur);
            }
            if(map.get(nums[i])[0]>max){
                max=map.get(nums[i])[0];
                res=i-map.get(nums[i])[1]+1;
            }else if(map.get(nums[i])[0]==max) res=Math.min(res,i-map.get(nums[i])[1]+1);
        }
        return res;
    }
}

31. 下一个排列
//O(n) O(1)
class Solution {
    public void nextPermutation(int[] nums) {
        int n=nums.length;
        if(n==0) return;
        int i=n-2;
        while(i>=0&&nums[i]>=nums[i+1]) i--;

        if(i>=0){
            int j=n-1;
            while(j>=0&&nums[j]<=nums[i]) j--;
            swap(nums,i,j);
        }
        reverse(nums,i+1);
    }
    public void reverse(int[] nums, int start) {
        int i=start, j=nums.length-1;
        while (i<j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }
    public void swap(int[] nums, int i, int j) {
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}

189. 旋转数组
class Solution {
    public void rotate(int[] nums, int k) {
        int prev=0;
        for(int i=0;i<k;i++){
            prev=nums[nums.length-1];
            for(int j=0;j<nums.length;j++){
                int temp=nums[j];
                nums[j]=prev;
                prev=temp;
            }
        }
    }
}

class Solution {
    public void rotate(int[] nums, int k) {
        k%=nums.length;
        int cnt=0;
        for(int i=0;cnt<nums.length;i++){
            int cur=i,pre=nums[i];
            do{
                int next=(cur+k)%nums.length;
                int temp=nums[next];
                cur=next;
                nums[next]=pre;
                pre=temp;
                cnt++;
            }while(i!=cur);
        }
    }
}

class Solution {
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        k%=n;
        reverse(nums,0,n);
        reverse(nums,0,k);
        reverse(nums,k,n);
    }
    public void reverse(int[] nums,int l,int r){
        for(int i=l,j=r-1;i<j;i++,j--){
            int temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
        }
    }
}

48. 旋转图像
class Solution {
    public void rotate(int[][] matrix) {
        int n=matrix.length;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int t=matrix[i][j];
                matrix[i][j]=matrix[j][i];
                matrix[j][i]=t;
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n/2;j++){
                int t=matrix[i][j];
                matrix[i][j]=matrix[i][n-1-j];
                matrix[i][n-1-j]=t;
            }
        }
    }
}

class Solution {
    public void rotate(int[][] matrix) {
        int n=matrix.length;
        for(int i=0;i<(n+1)/2;i++){
            for(int j=0;j<n/2;j++){
                int t=matrix[n-1-j][i];
                matrix[n-1-j][i]=matrix[n-1-i][n-1-j];
                matrix[n-1-i][n-1-j]=matrix[j][n-1-i];
                matrix[j][n-1-i]=matrix[i][j];
                matrix[i][j]=t;
            }
        }
    }
}

54. 螺旋矩阵
//O(mn) O(1)
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res=new ArrayList<>();
        if(matrix==null||matrix.length==0) return res;
        int l=0,r=matrix[0].length-1,t=0,b=matrix.length-1;
        while(t<=b&&l<=r){
            for(int i=l;i<=r;i++){
                res.add(matrix[t][i]);
            }
            t++;
            for(int i=t;i<=b;i++){
                res.add(matrix[i][r]);
            }
            r--;
            for(int i=r;i>=l&&t<=b;i--){
                res.add(matrix[b][i]);
            }
            b--;
            for(int i=b;i>=t&&l<=r;i--){
                res.add(matrix[i][l]);
            }
            l++;
        }
        return res;
    }
}

59. 螺旋矩阵 II
//O(n^2) O(1)
class Solution {
    public int[][] generateMatrix(int n) {
        int l = 0, r = n - 1, t = 0, b = n - 1;
        int[][] res = new int[n][n];
        int num = 1, tar = n * n;
        while(num <= tar){
            for(int i = l; i <= r; i++) res[t][i] = num++; // left to right.
            t++;
            for(int i = t; i <= b; i++) res[i][r] = num++; // top to bottom.
            r--;
            for(int i = r; i >= l; i--) res[b][i] = num++; // right to left.
            b--;
            for(int i = b; i >= t; i--) res[i][l] = num++; // bottom to top.
            l++;
        }
        return res;
    }
}

766. 托普利茨矩阵
class Solution {
    public boolean isToeplitzMatrix(int[][] matrix) {
        int n=matrix.length,m=matrix[0].length;
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                if(matrix[i][j]!=matrix[i-1][j-1]) return false;
            }
        }
        return true;
    }
}

73. 矩阵置零
class Solution {
    public void setZeroes(int[][] matrix) {
        boolean x=false;
        boolean y=false;
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]==0){
                    if(i==0) x=true;
                    if(j==0) y=true;
                    matrix[i][0]=matrix[0][j]=0;
                }
            }
        }
        for(int i=1;i<matrix.length;i++){
            for(int j=1;j<matrix[0].length;j++){
                if(matrix[i][0]==0||matrix[0][j]==0) matrix[i][j]=0;
            }
        }
        if(x){
            for(int j=0;j<matrix[0].length;j++) matrix[0][j]=0;
        }
        if(y){
            for(int i=0;i<matrix.length;i++) matrix[i][0]=0;
        }
    }
}

36. 有效的数独
class Solution {
    public boolean isValidSudoku(char[][] board) {
        int[][] rows=new int[9][9];
        int[][] columns=new int[9][9];
        int[][] boxes=new int[9][9];
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]!='.'){
                    int num=board[i][j]-'0';
                    if(rows[i][num-1]==1||columns[j][num-1]==1||boxes[i/3*3+j/3][num-1]==1) return false;
                    rows[i][num-1]=1;
                    columns[j][num-1]=1;
                    boxes[i/3*3+j/3][num-1]=1;
                }
            }
        }
        return true;
    }
}

面试题 16.04. 井字游戏
class Solution {
    public String tictactoe(String[] board) {
        int n=board.length;
        int x=0,y=0,a=0,b=0;
        boolean flag=false;
        for(int i=0;i<n;i++){
            x=0;y=0;
            for(int j=0;j<n;j++){
                if(board[i].charAt(j)==' ') flag=true;
                x+=board[i].charAt(j)-'A';
                y+=board[j].charAt(i)-'A';
            }
            if(x==('X'-'A')*n||y==('X'-'A')*n) return "X";
            if(x==('O'-'A')*n||y==('O'-'A')*n) return "O";
            a+=board[i].charAt(i)-'A';
            b+=board[i].charAt(n-1-i)-'A';
        }
        if(a==('X'-'A')*n||b==('X'-'A')*n) return "X";
        if(a==('O'-'A')*n||b==('O'-'A')*n) return "O";
        return flag?"Pending":"Draw";
    }
}






子序列(subsequence)：子序列并不要求连续。例如：string = "12345"，那么"12", "135"和“45”都是子序列
子串(substring/subarray)：子串一定是原始字符串的连续子串。例如：string = "12345"，那么"12", "234"和“45”都是子串

674. 最长连续递增序列/最长上升子串(Longest Increasing Substring)
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        if(nums.length==0||nums==null) return 0;
        int res=1,cnt=1;
        for(int i=1;i<nums.length;i++){
            cnt=nums[i]>nums[i-1]?cnt+1:1;
            res=Math.max(res,cnt);
        }
        return res;
    }
}

397. 最长上升连续子序列/最长上升子串 左右各扫一遍
class Solution {
    public int longestIncreasingContinuousSubsequence(int[] nums) {
        if(nums.length==0||nums==null) return 0;
        int res=1,cnt1=1,cnt2=1;
        for(int i=1;i<nums.length;i++){
            cnt1=nums[i]>nums[i-1]?cnt1+1:1;
            cnt2=nums[i]<nums[i-1]?cnt2+1:1;
            res=Math.max(res,Math.max(cnt1,cnt2));
        }
        return res;
    }
}

300. 最长上升子序列(LIS, Longest Increasing Subsequence)  dp

1671. 得到山形数组的最少删除次数
class Solution {
    public int minimumMountainRemovals(int[] nums) {
        int n=nums.length,max=0;
        int[] up=new int[n];
        int[] down=new int[n];
        for(int i=0;i<n;i++){
            up[i]=1;
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j]) up[i]=Math.max(up[i],up[j]+1);
            }
        }
        for(int i=n-1;i>=0;i--){
            down[i]=1;
            for(int j=i+1;j<n;j++){
                if(nums[i]>nums[j]) down[i]=Math.max(down[i],down[j]+1);
            }
        }
        for(int i=1;i<n-1;i++) max=Math.max(max,up[i]+down[i]-1);
        return n-max;
    }
}

128. 最长连续序列(LCS, Longest Consecutive Sequence)  不要求序列元素在原数组中连续
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums==null||nums.length==0) return 0;
        Arrays.sort(nums);
        int res=1,cnt=1;
        for(int i=1;i<nums.length;i++){
            if(nums[i]==nums[i-1]+1) cnt++;
            else if(nums[i]>nums[i-1]+1) cnt=1;
            res=Math.max(res,cnt);
        }
        return res;
    }
}

//O(n) O(n)  //不是O(n^2)是因为cur满足条件才进入while,每个数只会进入一次,即O(N+N)=O(N)
class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> set=new HashSet<>();
        for(int i:nums) set.add(i);
        int res=0;
        for(int i:set){
            if(!set.contains(i-1)){
                int cur=i;
                while(set.contains(cur)) cur++;
                res=Math.max(res,cur-i);
            }
        }
        return res;
    }
}

594. 最长和谐子序列
class Solution {
    public int findLHS(int[] nums) {
        if(nums==null||nums.length==0) return 0;
        Arrays.sort(nums);
        int res=0;
        for(int l=0,r=0;r<nums.length;r++){
            if(nums[r]-nums[l]==1) res=Math.max(res,r-l+1);
            while(nums[r]-nums[l]>1) l++;
        }
        return res;
    }
}

class Solution {
    public int findLHS(int[] nums) {
        if(nums==null||nums.length==0) return 0;
        Map<Integer,Integer> map=new HashMap<>();
        for(int i:nums) map.put(i,map.getOrDefault(i,0)+1);

        int res=0;
        for(Integer i:map.keySet()){
            if(map.containsKey(i+1)) res=Math.max(res,map.get(i)+map.get(i+1));
        }
        return res;
    }
}

718. 最长重复子数组//最长公共子串
class Solution {
    public int findLength(int[] A, int[] B) {
        int res=0;
        int[][] dp=new int[A.length+1][B.length+1];
        for(int i=1;i<=A.length;i++){
            for(int j=1;j<=B.length;j++){
                dp[i][j]=A[i-1]==B[j-1]?dp[i-1][j-1]+1:0;
                res=Math.max(res,dp[i][j]);
            }
        }
        return res;
    }
}

class Solution {
    public int findLength(int[] A, int[] B) {
        int res=0;
        int[] dp=new int[B.length+1];
        for(int i=1;i<=A.length;i++){
            for(int j=B.length;j>=1;j--){
                dp[j]=A[i-1]==B[j-1]?dp[j-1]+1:0;
                if(res<dp[j]) res=dp[j];
            }
        }
        return res;
    }
}

1143. 最长公共子序列(LCS, Longest Common Subsequence)  dp


//https://leetcode-cn.com/problems/repeated-substring-pattern/solution/tu-jie-yi-xia-shuang-bei-zi-fu-chuan-de-jie-fa-by-/
https://leetcode-cn.com/problems/repeated-substring-pattern/solution/gou-zao-shuang-bei-zi-fu-chuan-by-elevenxx/
459. 重复的子字符串
class Solution {
    public boolean repeatedSubstringPattern(String s) {
        return (s+s).indexOf(s,1)!=s.length();
    }
}

class Solution {
   public boolean repeatedSubstringPattern(String s) {
        String str=s+s;
        return str.substring(1, str.length()-1).contains(s);
    }
}

class Solution {
    public boolean repeatedSubstringPattern(String s) {
        int n=s.length();
        if(n==0) return false;
        int[] next=cal_next(s);
        if(next[n-1]!=-1&&n%(n-next[n-1]-1)==0) return true;
        return false;
    }
    int[] cal_next(String s){
        int n=s.length();
        int[] next=new int[n];
        next[0]=-1;
        for(int i=1,j=-1;i<n;i++){
            while(j>-1&&s.charAt(i)!=s.charAt(j+1)) j=next[j];
            if(s.charAt(i)==s.charAt(j+1)) j++;
            next[i]=j;
        }
        return next;
    }
}

1668. 最大重复子字符串
class Solution {
    public int maxRepeating(String sequence, String word) {
        int res=0;
        String cur=word;
        while(sequence.contains(cur)){
            cur+=word;
            res++;
        }
        return res;
    }
}

class Solution {
    public int maxRepeating(String sequence, String word) {
        int res=0;
        int cnt=0,r=0,s=sequence.length(),w=word.length();
        while(r<=s-w){
            if(word.equals(sequence.substring(r,r+w))){
                r+=w;
                cnt++;
            }else{
                r++;
                cnt=0;
            }
            res=Math.max(res,cnt);
        }
        return res;
    }
}

1044. 最长重复子串
//https://blog.csdn.net/pengwill97/article/details/80879387
//字符串hash+二分  如果最大重复子串长度为len，则一定有小于len的重复子串，故可使用二分查找
class Solution {
    long seed=131;
	long[] p,hash;
	char[] str;
	int n, len, pos;
    public String longestDupSubstring(String s) {
        str=s.toCharArray();
		n=str.length;
		hash=new long[n+1];
		p=new long[n+1];
        p[0]=1;
        for(int i=1;i<=n;i++){
            hash[i]=hash[i-1]*seed+str[i-1];
            p[i]=p[i-1]*seed;
        }

        int l=0,r=n;
        len=pos=-1;
        while(l<r){
            int m=l+r>>1;
            if(check(m)) l=m+1;
            else r=m;
        }
        return len==-1?"":s.substring(pos,pos+len);

    }
    public long getHash(int l,int r){
        return hash[r]-hash[l-1]*p[r-l+1];
    }
    public boolean check(int mid){
        Set<Long> set=new HashSet<>(n);
        for(int i=mid;i<=n;i++){
            long h=getHash(i-mid+1,i);
            if(set.contains(h)){
                len=mid;
                pos=i-mid;
                return true;
            }
            set.add(h);
        }
        return false;
    }
}



