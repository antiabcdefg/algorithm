//https://www.liwei.party/2019/06/17/leetcode-solution-new/search-insert-position/
二分查找
int binary_search(left,right)://寻找左侧边界
    while left<right:
        mid = left + (right - left)/2
        //mid = left + (right - left)>>1
        //mid = (left + right)/2
        if(check(mid)): left = mid + 1
        else: right = mid
    return left

int binary_search(left,right)://寻找右侧边界
    while left<right:
        mid = left + (right - left + 1)/2
        if(check(mid)): right = mid - 1
        else: left = mid
    return left

## 找第一个值等于给定值元素
int first(int[] arr, int target){
    int l=0, r=arr.size()-1;
    while(l < r){
        int m = l + (r - l)/2;
        if(arr[l]<target) l = m + 1;
        else r = m;
    }
    if(arr[l]==target && (l==0||arr[l-1]<target)) return l;
    return -1;
}
## 找最后一个值等于给定值元素
int last(int[] arr, int target){
    int l=0, r=arr.size()-1;
    while(l < r){
        int m = l + (r - l + 1)/2;
        if(arr[l]>target) r = m - 1;
        else l = m;
    }
    if(arr[l]==target && (l==arr.size()-1||arr[l+1]>target)) return l;
    return -1;
}

## >=value下界
int lower_bound(int[] arr, int first, int last, int target) {
    while(first < last) {
        int mid = first + (last - first) / 2;
        if(arr[mid] < target) first = mid + 1;
        else last = mid;
    }
    return first;
}

## >value下界
int upper_bound(int[] arr, int first, int last, int target) {
    while(first < last) {
        int mid = first + (last - first + 1) / 2;
        if(arr[mid] > target) last = mid - 1;
        else first = mid;
    }
    return first + 1;
}

## 找插入位置
int insert_search(int[] arr, int target){
    int l=0, r=arr.size();//保证target>max时, l=r=arr.size()
    while(l < r){
        int m = l + (r - l)/2;
        if(arr[l]<target) l = m + 1;
        else r = m;
    }
    return l;
}

## 浮点数
int binary_search(int l, int r){
    double eps = 1e-6
    while(r - l > eps){
        double m = l + (r - l)/2;
        if(arr[l]<target) l = m + 1;
        else r = m;
    }
    return l;
}




704.二分查找
class Solution {
    public int search(int[] nums, int target) {
        int l=0,r=nums.length-1;
        while(l<r){
            int m=l+((r-l)>>1);
            if(nums[m]<target) l=m+1;
            else r=m;
        }
        return nums[l]==target?l:-1;
    }
}

35.搜索插入位置
class Solution {
    public int searchInsert(int[] nums, int target) {
        int l=0,r=nums.length;//注意r
        while(l<r){
            int m=l+((r-l)>>1);
            if(nums[m]<target) l=m+1;
            else r=m;
        }
        return l;
    }
}





山脉数组
941. 有效的山脉数组
class Solution {
    public boolean validMountainArray(int[] arr) {
        int l=0,r=arr.length-1;
        while(l<arr.length-1&&arr[l]<arr[l+1]) l++;
        while(r>0&&arr[r]<arr[r-1]) r--;
        return l>0&&r<arr.length-1&&l==r;
    }
}

162. 寻找峰值/852. 山脉数组的峰顶索引
class Solution {
    public int findPeakElement(int[] nums) {
        if(nums.length<2) return 0;
        int l=0,r=nums.length-1;
        while(l<r){
            int m=(l+r)/2;
            if(nums[m]<nums[m+1]) l=m+1;
            else r=m;
        }
        return l;
    }
}

34.排序数组中查找元素的第一个和最后一个位置
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length==0) return new int[]{-1,-1};
        int start=first(nums,target);
        if(start==-1) return new int[]{-1,-1};
        int end=last(nums,target);
        return new int[]{start,end};
    }
    public int first(int[] nums, int target) {
        int l=0,r=nums.length-1;
        while(l<r){
            int m=l+((r-l)>>1);
            if(nums[m]<target) l=m+1;
            else r=m;
        }
        return nums[l]==target?l:-1;
    }
    public int last(int[] nums, int target) {
        int l=0,r=nums.length-1;
        while(l<r){
            int m=l+((r-l+1)>>1);
            if(nums[m]>target) r=m-1;
            else l=m;
        }
        return nums[l]==target?l:-1;
    }
}

1095. 山脉数组中查找目标值
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int l=0,r=mountainArr.length()-1;
        while(l<r){
            int m=l+((r-l)>>>1);
            if(mountainArr.get(m)<mountainArr.get(m+1)) l=m+1;
            else r=m;
        }
        int idx1=findFromSortedArr(mountainArr,0,l,target);
        int idx2=findFromInversedArr(mountainArr,l+1,mountainArr.length()-1,target);
        return idx1==-1?idx2:idx1;
    }
    private int findFromSortedArr(MountainArray mountainArr, int l, int r, int target) {
        while(l<r){
            int m=l+((r-l)>>>1);
            if(mountainArr.get(m)<target) l=m+1;
            else r=m;
        }
        return mountainArr.get(l)==target?l:-1;
    }
    private int findFromInversedArr(MountainArray mountainArr, int l, int r, int target) {
        while(l<r){
            int m=l+((r-l)>>>1);
            if(mountainArr.get(m)>target) l=m+1;
            else r=m;
        }
        return mountainArr.get(l)==target?l:-1;
    }
}


旋转排序数组
33.搜索旋转排序数组
class Solution {
    public int search(int[] nums, int target) {
        if(nums.length==0) return -1;
        int l=0,r=nums.length-1;
        while(l<r){
            int m=l+((r-l)>>1);
            if(nums[l]<nums[m]){
                if(nums[l]<=target&&target<=nums[m]) r=m;
                else l=m+1;
            }else{
                //[mid, right] 有序，但是为了和上一个if有同样的收缩行为，我们故意只认为 [mid+1, right] 有序
                if(nums[m+1]<=target&&target<=nums[r]) l=m+1;
                else r=m;
            }
        }
        return nums[l]==target?l:-1;
    }
}

81.搜索旋转排序数组 II
class Solution {
    public boolean search(int[] nums, int target) {
        if(nums.length==0) return false;
        int l=0,r=nums.length-1;
        while(l<r){
            int m=l+((r-l)>>1);
            if(nums[l]<nums[m]){
                if(nums[l]<=target&&target<=nums[m]) r=m;
                else l=m+1;
            }else if(nums[l]>nums[m]){
                //[mid, right] 有序，但是为了和上一个if有同样的收缩行为，我们故意只认为 [mid+1, right] 有序
                if(nums[m+1]<=target&&target<=nums[r]) l=m+1;
                else r=m;
            }else{
                if(nums[m]==target) return true;
                l++;
            }
        }
        return nums[l]==target;
    }
}

面试题 10.03. 搜索旋转数组
class Solution {
    public int search(int[] nums, int target) {
        int l=0,r=nums.length-1;
        if(r==-1) return -1;
        while(l<r){
            int m=(l+r)>>>1;
            if(nums[l]<nums[m]){
                if(nums[l]<=target&&target<=nums[m]) r=m;
                else l=m+1;
            }else if(nums[l]>nums[m]){
                if(nums[l]<=target||target<=nums[m]) r=m;
                else l=m+1;
            }
            else{
                if(nums[m]==target) break;
                l++;
            }
        }
        return nums[l]==target?l:-1;
    }
}

153.寻找旋转排序数组中的最小值
class Solution {
    public int findMin(int[] nums) {
        int l=0,r=nums.length-1;
        while(l<r){
            int m=l+((r-l)>>1);
            if(nums[m]>nums[r]) l=m+1;
            else r=m;
        }
        return nums[l];
    }
}

154.寻找旋转排序数组中的最小值 II
class Solution {
    public int findMin(int[] nums) {
        int l=0,r=nums.length-1;
        while(l<r){
            int m=l+((r-l)>>1);
            if(nums[m]>nums[r]) l=m+1;
            else if(nums[m]<nums[r]) r=m;
            else r--;
        }
        return nums[l];
    }
}



870. 优势洗牌 田忌赛马
class Solution {
    public int[] advantageCount(int[] A, int[] B) {
        List<Integer> copy=new ArrayList<Integer>();
        for(int i:A) copy.add(i);
        Collections.sort(copy);
        for(int i=0;i<B.length;i++){
            int idx=insert_search(copy,B[i]);
            B[i]=copy.get(idx);
            copy.remove(idx);
        }
        return B;
    }
    public int insert_search(List<Integer> nums, int target){
        int l=0, r=nums.size()-1;
        if(nums.get(r)<=target) return l;
        while(l<r){
            int m=l+(r-l)/2;
            if(nums.get(m)<=target) l=m+1;
            else r=m;
        }
        return l;
    }
}

class Solution {
    public int[] advantageCount(int[] A, int[] B) {
        int[][] pair=new int[A.length][2];
        for(int i=0;i<B.length;i++) pair[i]=new int[]{B[i],i};
        Arrays.sort(pair, (a,b)->a[0]-b[0]);
        Arrays.sort(A);
        int[] res=new int[A.length];
        int l=0,r=A.length-1;
        for(int i=0;i<B.length;i++){
            if(A[i]<=pair[l][0]) res[pair[r--][1]]=A[i];
            else res[pair[l++][1]]=A[i];
        }
        return res;
    }
}

275.H指数 II
//给定一个大小n的升序列表，找到满足 citations[i]>= n-i的第一个 citations[i]，返回N-i
class Solution {
    public int hIndex(int[] citations) {
        int len=citations.length;
        if(len==0||citations[len-1]==0) return 0;
        int l=0,r=len-1;
        while(l<r){
            int m=l+((r-l)>>1);
            if(citations[m]<len-m) l=m+1;
            else r=m;
        }
        return len-l;
    }
}

69.x的平方根
class Solution {
    public int mySqrt(int x) {
        if(x==0) return 0;
        int l=0,r=x/2+1;
        while(l<r){
            int m=l+((r-l+1)>>1);
            if(m>x/m) r=m-1;
            else l=m;
        }
        return l;
    }
}

class Solution {//牛顿法
    public int mySqrt(int x) {
        if(x==0) return 0;
        long z=x;
        while(z*z>x) z=(z+x/z)/2;
        return (int)z;
    }
}

790. 数的三次方根
class Solution {
    public double mySqrt(int x) {
        if(x==0) return 0;
        double l=0,r=Math.abs(x);
        double eps=1e-8;

        while(r-l>1e-8) {
            double mid=(l+r)/2;
            if(mid*mid>Math.abs(x)/mid) r=mid;
            else l=mid;
        }
        return x>=0?l:-l;
    }
}

278.第一个错误的版本
public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int l=1,r=n;
        while(l<r){
            int m=l+((r-l)>>1);
            if(isBadVersion(m)==false) l=m+1;
            else r=m;
        }
        return isBadVersion(l)&&(l==1||isBadVersion(l-1)==false)?l:-1;//l==1为真 或 l为真且l-1为假
    }
}

374.猜数字大小
public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int l=1,r=n;
        while(l<r){
            int m=l+((r-l)>>1);
            if(guess(m)==0) return m;
            else if(guess(m)==1) l=m+1;
            else r=m;
        }
        return l;
    }
}

633.平方数之和
class Solution {
    public boolean judgeSquareSum(int c) {
        int i=0,j=(int)Math.sqrt(c);
        while(i<=j){
            if(i*i==c-j*j) return true;
            else if(i*i<c-j*j) i++;
            else j--;
        }
        return false;
    }
}

//快慢指针 数组
287.寻找重复数
//抽屉原理：把5个苹果放到4个抽屉，无论怎样放，至少会有一个抽屉里面放>=2个苹果。
//结果查找的是：哪个抽屉塞多了
//O(nlogn) O(1)
class Solution {
    public int findDuplicate(int[] nums) {
        int l=1,r=nums.length-1;
        while(l<r){
            int m=l+((r-l)>>1);
            int cnt=0;
            for(int n:nums) if(n<=m) cnt++;

            if(cnt<=m) l=m+1;
            else r=m;
        }
        return l;
    }
}

//Bitwise
136. 只出现一次的数字/540. 有序数组中的单一元素(有序)
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int l=0,r=nums.length-1;
        while(l<r){
            int m=l+((r-l)>>1);
            m=(m&1)==0?m:m-1;
            if(nums[m]==nums[m+1]) l=m+2;
            else r=m;
        }
        return nums[l];
    }
}

658. 找到 K 个最接近的元素
//保留k个=删除size-k个
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int cnt=arr.length-k;
        int l=0,r=arr.length-1;
        while(cnt>0){
            if(x-arr[l]>arr[r]-x) l++;
            else r--;
            cnt--;
        }
        List<Integer> res=new ArrayList<>();
        for(int i=l;i<l+k;i++) res.add(arr[i]);
        return res;
    }
}

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int l=0,r=arr.length-k;
        while(l<r){
            int m=l+((r-l)>>>1);
            if(x-arr[m]>arr[m+k]-x) l=m+1;
            else r=m;
        }
        List<Integer> res=new ArrayList<>();
        for(int i=l;i<l+k;i++) res.add(arr[i]);
        return res;
    }
}

1712. 将数组分成三个子数组的方案数
class Solution {
    public int waysToSplit(int[] nums) {
        int n=nums.length;
        long[] prefix=new long[n+1];
        for(int i=1;i<=n;i++) prefix[i]=prefix[i-1]+nums[i-1];
        long res=0;
        for(int i=1;i<n-1;i++){
            if(prefix[i]*3>prefix[n]) break;
            int l1=i+1,r1=n;
            while(l1<r1){
                int m=l1+(r1-l1)/2;
                if(prefix[m]-prefix[i]<prefix[i]) l1=m+1;
                else r1=m;
            }

            int l2=i+1,r2=n;
            while(l2<r2){
                int m=l2+(r2-l2)/2;
                if(prefix[m]-prefix[i]<=prefix[n]-prefix[m]) l2=m+1;
                else r2=m;
            }
            res+=l2-l1;
        }
        return (int)(res%(1e9+7));
    }
}




4. 寻找两个正序数组的中位数
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m=nums1.length,n=nums2.length;
        int med=(m+n)>>>1;
        int i=0,j=0;

        int cnt=-1;
        int[] res=new int[]{0,0};
        while(cnt<med){
            cnt++;
            if(i==m) res[cnt&1]=nums2[j++];
            else if(j==n) res[cnt&1]=nums1[i++];
            else if(nums1[i]<nums2[j]) res[cnt&1]=nums1[i++];
            else res[cnt&1]=nums2[j++];
        }
        if(((m+n)&1)==1) return res[med&1];
        return (res[0]+res[1])/2.0;
    }
}

//https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/he-bing-yi-hou-zhao-gui-bing-guo-cheng-zhong-zhao-/
//单数数组中位数是左边最大，偶数数组中位数是(左边最大+右边最小)/2
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length>nums2.length) return findMedianSortedArrays(nums2,nums1);

        int m=nums1.length,n=nums2.length;
        int med=(m+n+1)>>>1;
        int l=0,r=m;
        while(l<r){
            int mid=l+(r-l)/2;
            if(nums1[mid]<nums2[med-mid-1]) l=mid+1;
            else r=mid;
        }
        int nums1LeftMax = l==0?Integer.MIN_VALUE:nums1[l-1];
        int nums1RightMin = l==m?Integer.MAX_VALUE:nums1[l];

        int nums2LeftMax = med-l==0?Integer.MIN_VALUE:nums2[med-l-1];
        int nums2RightMin = med-l==n?Integer.MAX_VALUE:nums2[med-l];

        if((m+n)%2==1) return Math.max(nums1LeftMax,nums2LeftMax);
        return (Math.max(nums1LeftMax,nums2LeftMax)+Math.min(nums1RightMin,nums2RightMin))*0.5;
    }
}

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length,n2=nums2.length;
        int n=n1+n2;
        int l=n/2,r=n/2+1;
        if(n%2==0) return (findKth(nums1, 0, nums2, 0, l) + findKth(nums1, 0, nums2, 0, r)) / 2.0;
        return findKth(nums1, 0, nums2, 0, r) * 1.0;
    }
    public int findKth(int[] nums1, int start1, int[] nums2, int start2, int k) {
        if(start1>=nums1.length) return nums2[start2+k-1];
        if(start2>=nums2.length) return nums1[start1+k-1];
        if(k==1) return Math.min(nums1[start1],nums2[start2]);

        int m1=(start1+k/2-1)<nums1.length?nums1[start1+k/2-1]:Integer.MAX_VALUE;
        int m2=(start2+k/2-1)<nums2.length?nums2[start2+k/2-1]:Integer.MAX_VALUE;

        if(m1<m2) return findKth(nums1, start1+k/2, nums2, start2, k-k/2);
        return findKth(nums1, start1, nums2, start2+k/2, k-k/2);
    }
}

