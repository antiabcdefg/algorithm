1614. 括号的最大嵌套深度
class Solution {
    public int maxDepth(String s) {
        int res=0,cnt=0;
        for(char c:s.toCharArray()){
            if(c=='(') cnt++;
            else if(c==')') cnt--;
            res=Math.max(res,cnt);
        }
        return res;
    }
}

20. 有效的括号
//O(n) O(n)
class Solution {
    public boolean isValid(String s) {
        Deque<Character> stk=new ArrayDeque<>();
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            if(c=='(') stk.push(')');
            else if(c=='{') stk.push('}');
            else if(c=='[') stk.push(']');
            else{
                if(stk.isEmpty()||stk.peek()!=c) return false;
                else stk.pop();
            }
        }
        return stk.isEmpty();
    }
}

921. 使括号有效的最少添加
class Solution {
    public int minAddToMakeValid(String S) {
        int cnt=0,need=0;
        for(char c:S.toCharArray()){
            if(c=='(') need++;
            else{
                need--;
                if(need==-1){
                    cnt++;
                    need=0;
                }
            }
        }
        return cnt+need;
    }
}

1541. 平衡括号字符串的最少插入次数
class Solution {
    public int minInsertions(String s) {
        int cnt=0,need=0;

        for(char c:s.toCharArray()){
            if(c=='(') {
                need+=2;
                if((need&1)==1) {
                    cnt++;
                    need--;
                }
            }else{
                need--;
                if(need==-1){
                    cnt++;
                    need=1;
                }
            }
        }
        return cnt+need;
    }
}

856. 括号的分数
// (()(())) -> (()) ((()))
class Solution {
    public int scoreOfParentheses(String S) {
        Deque<Character> stk=new ArrayDeque<>();
        int res=0;
        for(int i=0;i<S.length();i++){
            char c=S.charAt(i);
            if(c=='(') stk.push(')');
            else{
                if(S.charAt(i-1)=='(') res+=Math.pow(2,stk.size()-1);
                stk.pop();
            }
        }
        return res;
    }
}

class Solution {
    public int scoreOfParentheses(String S) {
        int res=0,size=-1;
        for(int i=0;i<S.length();i++){
            char c=S.charAt(i);
            if(c=='(') size++;
            else{
                if(S.charAt(i-1)=='(') res+=Math.pow(2,size);
                size--;
            }
        }
        return res;
    }
}

32. 最长有效括号
class Solution {
    public int longestValidParentheses(String s) {
        int res=0;
        Stack<Integer> stk=new Stack<>();
        for(int i=0;i<s.length();i++){
            if(stk.isEmpty()||s.charAt(i)=='('||s.charAt(stk.peek())==')') stk.push(i);
            else{
                stk.pop();
                int cur=i+1;
                if(!stk.isEmpty()) cur=i-stk.peek();
                res=Math.max(res,cur);
            }
        }
        return res;
    }
}

//dp
class Solution {
    public int longestValidParentheses(String s) {
        int res=0;
        int[] dp=new int[s.length()];
        for(int i=1;i<s.length();i++){
            if(s.charAt(i)==')'){
                if(s.charAt(i-1)=='(') dp[i]=i>=2?dp[i-2]+2:2;
                else if(i-dp[i-1]>0&&s.charAt(i-dp[i-1]-1)=='(') dp[i]=i-dp[i-1]-2>=0?dp[i-1]+2+dp[i-dp[i-1]-2]:dp[i-1]+2;
                res=Math.max(res,dp[i]);
            }
        }
        return res;
    }
}

1249. 移除无效的括号
class Solution {
    public String minRemoveToMakeValid(String s) {
        Deque<Integer> stk=new ArrayDeque<>();
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            if(!stk.isEmpty()&&c==')'&&s.charAt(stk.peek())=='(') stk.pop();
            else if(c=='('||c==')') stk.push(i);
        }
        StringBuilder res=new StringBuilder(s);
        while(!stk.isEmpty()) res.deleteCharAt(stk.pop());
        return res.toString();
    }
}

//回溯
301. 删除无效的括号
class Solution {
    List<String> res;
    public List<String> removeInvalidParentheses(String s) {
        res=new ArrayList<>();
        int left=0,right=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='(') left++;
            else if(s.charAt(i)==')'){
                if(left<=0) right++;
                else left--;
            }
        }
        dfs(s,0,left,right);
        return res;
    }
    public void dfs(String s,int start,int l,int r){
        if(l==0&&r==0){
            if(isValid(s)) res.add(s);
            return;
        }
        for(int i=start;i<s.length();i++){
            if(i>start&&s.charAt(i)==s.charAt(i-1)) continue;
            if(l>0&&s.charAt(i)=='(') dfs(s.substring(0,i)+s.substring(i+1),i,l-1,r);
            if(r>0&&s.charAt(i)==')') dfs(s.substring(0,i)+s.substring(i+1),i,l,r-1);
        }
    }
    public boolean isValid(String s){
        int cnt=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='(') cnt++;
            else if(s.charAt(i)==')') cnt--;
            if(cnt<0) return false;
        }
        return cnt==0;
    }
}