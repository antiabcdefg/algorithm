BST中序遍历的序列是递增排序的序列

Successor后继节点 比当前节点大的最小节点。
public int successor(TreeNode root) {
    root=root.right;
    while(root.left!=null) root=root.left;
    return root;
}

Predecessor前驱节点 比当前节点小的最大节点。
public int predecessor(TreeNode root) {
    root=root.left;
    while(root.right!=null) root=root.right;
    return root;
}

530. 二叉搜索树的最小绝对差
class Solution {
    int res=Integer.MAX_VALUE;
    TreeNode prev;
    public int getMinimumDifference(TreeNode root) {
        dfs(root);
        return res;
    }
    public void dfs(TreeNode root){
        if(root==null) return;
        dfs(root.left);
        if(prev!=null) res=Math.min(res,root.val-prev.val);
        prev=root;
        dfs(root.right);
    }
}

501. 二叉搜索树中的众数
class Solution {
    int max=0,cnt=0;
    TreeNode prev=null;
    List<Integer> res=new ArrayList<>();
    public int[] findMode(TreeNode root) {
        dfs(root);
        return res.stream().mapToInt(i->i).toArray();
    }
    public void dfs(TreeNode root){
        if(root==null) return;
        dfs(root.left);

        if(prev==null||prev.val!=root.val) cnt=1;
        else if(prev.val==root.val) cnt++;
        prev=root;
        if(cnt==max) res.add(root.val);
        if(cnt>max){
            max=cnt;
            res.clear();
            res.add(root.val);
        }

        dfs(root.right);
        return;
    }
}

897. 递增顺序查找树
class Solution {
    TreeNode dummy=new TreeNode(0),cur=dummy;
    public TreeNode increasingBST(TreeNode root) {
        if(root==null) return null;
        increasingBST(root.left);
        root.left=null;
        cur.right=root;
        cur=cur.right;
        increasingBST(root.right);
        return dummy.right;
    }
}

class Solution {
    TreeNode dummy=new TreeNode(0),cur=dummy;
    public TreeNode increasingBST(TreeNode root) {
        if(root==null) return null;
        increasingBST(root.left);
        cur.right=new TreeNode(root.val);
        cur=cur.right;
        increasingBST(root.right);
        return dummy.right;
    }
}

230. 二叉搜索树中第K小的元素
class Solution {
    int res=0,rank=0;
    public int kthSmallest(TreeNode root,int k) {
        dfs(root,k);
        return res;
    }
    public void dfs(TreeNode root,int k){
        if(root==null) return;
        dfs(root.left,k);
        rank++;
        if(rank==k){
            res=root.val;
            return;
        }
        dfs(root.right,k);
    }
}

538. 把二叉搜索树转换为累加树
class Solution {
    private int sum=0;
    public TreeNode convertBST(TreeNode root) {
        dfs(root);
        return root;
    }
    public void dfs(TreeNode root){
        if(root==null) return;
        dfs(root.right);
        sum+=root.val;
        root.val=sum;
        dfs(root.left);
    }
}

98. 验证二叉搜索树/面试题 04.05. 合法二叉搜索树
class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root,null,null);
    }
    public boolean isValidBST(TreeNode root,TreeNode min,TreeNode max) {
        if(root==null) return true;
        if(min!=null&&root.val<=min.val) return false;
        if(max!=null&&root.val>=max.val) return false;
        return isValidBST(root.left,min,root)&&isValidBST(root.right,root,max);
    }
}

class Solution {
    public TreeNode pre;
    public boolean isValidBST(TreeNode root) {
        if(root==null) return true;
        if(!isValidBST(root.left)) return false;

        if(pre!=null&&root.val<=pre.val) return false;
        pre=root;

        if(!isValidBST(root.right)) return false;
        return true;
    }
}

class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root==null) return true;
        Stack<TreeNode> stk=new Stack<>();
        TreeNode pre=null;
        while(root!=null||!stk.isEmpty()){
            while(root!=null){
                stk.push(root);
                root=root.left;
            }
            root=stk.pop();
            if(pre!=null&&pre.val>=root.val) return false;
            pre=root;
            root=root.right;
        }
        return true;
    }
}

剑指 Offer 33. 二叉搜索树的后序遍历序列
//最差退化为链表O(n^2) O(n)
class Solution {
    public boolean verifyPostorder(int[] postorder) {
        return dfs(postorder,0,postorder.length-1);
    }
    public boolean dfs(int[] postorder,int l,int r){
        if(l>=r) return true;
        int p=l;
        while(postorder[p]<postorder[r]) p++;
        int m=p;
        while(postorder[p]>postorder[r]) p++;
        return p==r&&dfs(postorder,l,m-1)&&dfs(postorder,m,r-1);
    }
}

//各节点均入/出栈一次O(n) O(n)
class Solution {
    public boolean verifyPostorder(int[] postorder) {
        Deque<Integer> stk=new ArrayDeque<>();
        int root=Integer.MAX_VALUE;
        for(int i=postorder.length-1;i>=0;i--) {
            if(postorder[i]>root) return false;
            while(!stk.isEmpty()&&stk.peek()>postorder[i]) root=stk.pop();
            stk.push(postorder[i]);
        }
        return true;
    }
}

99. 恢复二叉搜索树
class Solution {
    TreeNode mis1,mis2,prev;
    public void recoverTree(TreeNode root) {
        inorder(root);
        if(mis1!=null&&mis2!=null){
            int temp=mis1.val;
            mis1.val=mis2.val;
            mis2.val=temp;
        }
    }
    public void inorder(TreeNode root){
        if(root==null) return;
        inorder(root.left);
        if(prev!=null&&prev.val>root.val){
            mis2=root;
            if(mis1==null) mis1=prev;
        }
        prev=root;
        inorder(root.right);
    }
}

700. 二叉搜索树中的搜索
class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if(root==null||root.val==val) return root;
        if(root.val>val) return searchBST(root.left,val);
        if(root.val<val) return searchBST(root.right,val);
    }
}

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        while(root!=null&&root.val!=val) root=root.val>val?root.left:root.right;
        return root;
    }
}

701. 二叉搜索树中的插入操作
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root==null) return new TreeNode(val);
        if(root.val>val) root.left=insertIntoBST(root.left,val);
        else if(root.val<val) root.right=insertIntoBST(root.right,val);
        return root;
    }
}

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root==null) return new TreeNode(val);
        TreeNode cur=root;
        while(cur!=null){
            if(cur.val>val){
                if(cur.left!=null) cur=cur.left;
                else{
                    cur.left=new TreeNode(val);
                    break;
                }
            }else if(cur.val<val){
                if(cur.right!=null) cur=cur.right;
                else{
                    cur.right=new TreeNode(val);
                    break;
                }
            }
        }
        return root;
    }
}

450. 删除二叉搜索树中的节点
//O(logn) O(height)
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return root;
        if(root.val>key) root.left=deleteNode(root.left,key);
        else if(root.val<key) root.right=deleteNode(root.right,key);
        else{
            if(root.left==null) return root.right;
            else if(root.right==null) return root.left;
            root.val=successor(root);
            root.right=deleteNode(root.right,root.val);
        }
        return root;
    }
    public int successor(TreeNode root) {
        root=root.right;
        while(root.left!=null) root=root.left;
        return root.val;
    }
}

669. 修剪二叉搜索树
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if(root==null) return root;
        if(root.val<low) return trimBST(root.right,low,high);
        if(root.val>high) return trimBST(root.left,low,high);
        root.left=trimBST(root.left,low,high);
        root.right=trimBST(root.right,low,high);
        return root;
    }
}

class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if(root==null) return root;
        while(root.val<low||root.val>high) {
            if(root.val<low) root=root.right;
            else root=root.left;
        }
        TreeNode cur=root;
        while(cur!=null){
            while(cur.left!=null&&cur.left.val<low) cur.left=cur.left.right;
            cur=cur.left;
        }
        cur=root;
        while(cur!=null){
            while(cur.right!=null&&cur.right.val>high) cur.right=cur.right.left;
            cur=cur.right;
        }
        return root;
    }
}

426. 将二叉搜索树转化为排序的双向链表
class Solution {
    public Node head,pre;
    public Node treeToDoublyList(Node root) {
        if(root==null) return null;
        dfs(root);
        pre.right=head;
        head.left=pre;
        return head;
    }
    public void dfs(Node root){
        if(root==null) return;
        dfs(root.left);

        if(pre==null) head=root;
        else pre.right=root;
        root.left=pre;
        pre=root;

        dfs(root.right);
    }
}

//分治
108. 将有序数组转换为二叉搜索树
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if(nums.length==0) return null;
        return d2c(nums,0,nums.length-1);
    }
    public TreeNode d2c(int[] nums,int l,int r){
        if(l>r) return null;
        int mid=(l+r)>>>1;
        TreeNode root=new TreeNode(nums[mid]);
        root.left=d2c(nums,l,mid-1);
        root.right=d2c(nums,mid+1,r);
        return root;
    }
}

95. 不同的二叉搜索树 II
class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n<1) return new LinkedList<TreeNode>();
        return dnc(1,n);
    }
    public List<TreeNode> dnc(int l,int r){
        List<TreeNode> res=new LinkedList<>();
        if(l>r){
            res.add(null);
            return res;
        }
        for(int i=l;i<=r;i++){
            List<TreeNode> left=dnc(l,i-1);
            List<TreeNode> right=dnc(i+1,r);
            for(TreeNode ln:left){
                for(TreeNode rn:right){
                    TreeNode root=new TreeNode(i);
                    root.left=ln;
                    root.right=rn;
                    res.add(root);
                }
            }
        }
        return res;
    }
}

96. 不同的二叉搜索树
//dp定义为i个数有几个不同BST
class Solution {
    public int numTrees(int n) {
        int[] dp=new int[n+1];
        dp[0]=dp[1]=1;
        for(int i=2;i<=n;i++){
            for(int j=0;j<i;j++){
                dp[i]+=dp[j]*dp[i-1-j];
            }
        }
        return dp[n];
    }
}