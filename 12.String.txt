
字符串排序
451. 根据字符出现频率排序  快排 最小堆

791. 自定义字符串排序
class Solution {
    public String customSortString(String S, String T) {
        int[] dic=new int[26];
        for(int i=0;i<S.length();i++) dic[S.charAt(i)-'a']=i+1;
        Character[] copy=new Character[T.length()];
        for(int i=0;i<T.length();i++) copy[i]=T.charAt(i);
        Arrays.sort(copy,(a,b)->dic[a-'a']-dic[b-'a']);
        char[] res=new char[T.length()];
        for(int i=0;i<T.length();i++) res[i]=copy[i];
        return String.valueOf(res);
    }
}

953. 验证外星语词典
class Solution {
    public boolean isAlienSorted(String[] words, String order) {
        Map<Character,Integer> map=new HashMap<>();
        for(int i=0;i<order.length();i++) map.put(order.charAt(i),i);
        for(int i=1;i<words.length;i++){
            if(!check(words[i-1],words[i],map)) return false;
        }
        return true;
    }
    public boolean check(String w1,String w2,Map<Character,Integer> map){
        for(int i=0;i<w1.length();i++){
            if(i>=w2.length()) return false;
            if(map.get(w1.charAt(i))>map.get(w2.charAt(i))) return false;
            else if(map.get(w1.charAt(i))<map.get(w2.charAt(i))) return true;
        }
        return true;
    }
}

937. 重新排列日志文件
class Solution {
    public String[] reorderLogFiles(String[] logs) {
        Arrays.sort(logs, (log1, log2) -> {
            String[] split1=log1.split(" ", 2);
            String[] split2=log2.split(" ", 2);
            boolean isDigit1=Character.isDigit(split1[1].charAt(0));
            boolean isDigit2=Character.isDigit(split2[1].charAt(0));
            if (!isDigit1&&!isDigit2) {
                int cmp=split1[1].compareTo(split2[1]);
                if(cmp!=0) return cmp;
                return split1[0].compareTo(split2[0]);
            }
            return isDigit1?(isDigit2?0:1):-1;
        });
        return logs;
    }
}

字符串匹配
28. 实现 strStr()  indexOf()
class Solution {
    public int strStr(String haystack, String needle) {
        int n1=haystack.length(),n2=needle.length();
        if(n1<n2) return -1;
        for(int i=0;i<n1-n2+1;i++){
            if(needle.equals(haystack.substring(i,i+n2))) return i;
        }
        return -1;
    }
}

class Solution {
    public int strStr(String haystack, String needle) {
        int n1=haystack.length(),n2=needle.length();
        if(n1<n2) return -1;
        int i=0,j=0;
        while(i<n1&&j<n2){
            if(haystack.charAt(i)==needle.charAt(j)){
                i++;j++;
            }else{
                i=i-j+1;
                j=0;
            }
        }
        return j>=n2?i-n2:-1;
    }
}

//https://mp.weixin.qq.com/s/70OXnZ4Ez29CKRrUpVJmug
//KMP算法, 时间=生成O(m)+匹配O(n)=O(m+n)
class Solution {
    public int strStr(String haystack, String needle) {
        int n1=haystack.length(),n2=needle.length();
        if(n2==0) return 0;
        int[] next=cal_next(needle);
        for(int i=0,j=-1;i<n1;i++){
            while(j>-1&&haystack.charAt(i)!=needle.charAt(j+1)) j=next[j];
            if(haystack.charAt(i)==needle.charAt(j+1)) j++;
            if(j==n2-1) return i-n2+1;
        }
        return -1;
    }
    int[] cal_next(String s){//最长相等前后缀, prefix table
        int n=s.length();
        int[] next=new int[n];
        next[0]=-1;
        for(int i=1,j=-1;i<n;i++){//i后缀末尾,j前缀末尾,正常情况匹配时更新指针到当前前一位next[i-1]
            while(j>-1&&s.charAt(i)!=s.charAt(j+1)) j=next[j];
            if(s.charAt(i)==s.charAt(j+1)) j++;
            next[i]=j;
        }
        return next;
    }
}

290. 单词规律
class Solution {
    public boolean wordPattern(String pattern, String s) {
        String[] words=s.split(" ");
        if(pattern.length()!=words.length) return false;
        Map idx=new HashMap();
        for(Integer i=0;i<pattern.length();i++){
            if(idx.put(pattern.charAt(i),i)!=idx.put(words[i],i)) return false;
        }
        return true;
    }
}

面试题 17.17. 多次搜索  TrieTree

面试题 16.18. 模式匹配
class Solution {
    public boolean patternMatching(String pattern, String value) {
        return backtrack(pattern,value,new HashMap<Character,String>(),new HashSet<String>());
    }
    public boolean backtrack(String pattern,String value,HashMap<Character,String> map,HashSet<String> set){
        if(pattern.equals("")) return value.equals("");
        char c=pattern.charAt(0);
        if(map.containsKey(c)) {
            if(!value.startsWith(map.get(c))) return false;
            return backtrack(pattern.substring(1),value.substring(map.get(c).length()),map,set);
        }
        for(int i=-1;i<value.length();i++){
            String word=value.substring(0,i+1);
            if(set.contains(word)) continue;
            map.put(c,word);
            set.add(word);
            if(backtrack(pattern.substring(1),value.substring(i+1),map,set)) return true;
            map.remove(c);
            set.remove(word);
        }
        return false;
    }
}

686. 重复叠加字符串匹配
//abc --> bcabcabcab (bc-abc-abc-ab),  len(bc-abc-abc-ab) < len(abc-abc-abc-abc) < len(abc + bcabcabcab + abc)
class Solution {
    public int repeatedStringMatch(String a, String b) {
        StringBuilder sb=new StringBuilder(a);
        for(int i=1;sb.length()<2*a.length()+b.length();i++){
            if(sb.toString().indexOf(b)!=-1) return i;
            sb.append(a);
        }
        return -1;
    }
}


字符串比较
242. 有效的字母异位词/面试题 01.02. 判定是否互为字符重排
class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length()) return false;
        int[] cnts=new int[26];
        for(int i=0;i<s.length();i++){
            cnts[s.charAt(i)-'a']++;
            cnts[t.charAt(i)-'a']--;
        }
        for(int i=0;i<26;i++) if(cnts[i]>0) return false;
        return true;
    }
}

205. 同构字符串
class Solution {
    public boolean isIsomorphic(String s, String t) {
        if(s.length()!=t.length()) return false;
        for(int i=0;i<s.length();i++){
            if(s.indexOf(s.charAt(i))!=t.indexOf(t.charAt(i))) return false;
        }
        return true;
    }
}

class Solution {
    public boolean isIsomorphic(String s, String t) {
        if(s.length()!=t.length()) return false;
        int[] s_first_idx=new int[256];
        int[] t_first_idx=new int[256];
        for(int i=0;i<s.length();i++){
            if(s_first_idx[s.charAt(i)]!=t_first_idx[t.charAt(i)]) return false;
            s_first_idx[s.charAt(i)]=t_first_idx[t.charAt(i)]=i+1;
        }
        return true;
    }
}

49. 字母异位词分组
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> res=new ArrayList<>();
        Map<String,List<String>> map=new HashMap<>();
        for(String s:strs){
            char[] word=s.toCharArray();
            Arrays.sort(word);
            List<String> cur=map.computeIfAbsent(String.valueOf(word),k->new ArrayList<>());
            cur.add(s);
            map.put(String.valueOf(word),cur);
        }
        for(String s:map.keySet()){
            res.add(map.get(s));
        }
        return res;
    }
}

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> res=new ArrayList<>();
        Map<Long,List<String>> map=new HashMap<>();
        long[] dic={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101};
        for(String s:strs){
            long cnt=1;
            for(int j=0;j<s.length();j++) cnt*=dic[s.charAt(j)-'a'];
            List<String> cur=map.computeIfAbsent(cnt,k->new ArrayList<>());
            cur.add(s);
            map.put(cnt,cur);
        }
        for(Long cnt:map.keySet()){
            res.add(map.get(cnt));
        }
        return res;
    }
}

1657. 确定两个字符串是否接近
class Solution {
    public boolean closeStrings(String s, String t) {
        if(s.length()!=t.length()) return false;
        int[] cnts=new int[26];
        int[] cntt=new int[26];
        for(char c:s.toCharArray()) cnts[c-'a']++;
        for(char c:t.toCharArray()) cntt[c-'a']++;

        for(int i=0;i<26;i++){
            if(cnts[i]==0&&cntt[i]!=0) return false;
            if(cntt[i]==0&&cnts[i]!=0) return false;
        }
        Arrays.sort(cnts);Arrays.sort(cntt);
        return Arrays.equals(cnts,cntt);
    }
}

2 Strings find the common words
//找相同  O(n) O(n)
class Solution {
    public List<String> findCommonWords(String s1, String s2) {
        List<String> res=new ArrayList<>();
        Set<String> set=new HashSet<>();

        for(String i:s1.split(" ")) if(i.length()!=0) set.add(i);
        for(String i:s2.split(" ")) if(set.contains(i)) res.add(i);

        return res;
    }
}

//找出出现次数也相同
//O(n) O(n)
class Solution {
    public List<String> findCommonWords(String s1, String s2) {
        Map<String,Integer> map=new HashMap<>();
        Map<String,Integer> map2=new HashMap<>();
        for(String s:s1.split(" ")){
            if(s.length()!=0) map.put(s,map.getOrDefault(s,0)+1);
        }
        for(String s:s2.split(" ")){
            if(s.length()!=0) map2.put(s,map2.getOrDefault(s,0)+1);
        }

        List<String> res=new ArrayList<>();
        for(String s:map.keySet()) if(map.get(s).equals(map2.get(s))) res.add(s);
        return res;
    }
}

696. 计数二进制子串
class Solution {
    public int countBinarySubstrings(String s) {
        int cnt=0;
        for(int i=0;i<s.length()-1;i++){
            cnt+=getP(s,i,i+1);
        }
        return cnt;
    }
    public int getP(String s,int l,int r) {
        int cnt=0;
        char x=s.charAt(l),y=s.charAt(r);
        if(x==y) return 0;
        for(int n=s.length();l>=0&&r<n&&s.charAt(l)==x&&s.charAt(r)==y;) {
            l--;
            r++;
            cnt++;
        }
        return cnt;
    }
}

class Solution {
    public int countBinarySubstrings(String s) {
        int pre=0,res=0;
        for(int i=0;i<s.length();){
            char c=s.charAt(i);
            int cnt=0;
            while(i<s.length()&&s.charAt(i)==c){
                i++;
                cnt++;
            }
            res+=Math.min(pre,cnt);
            pre=cnt;
        }
        return res;
    }
}

class Solution {
    public int countBinarySubstrings(String s) {
        int pre=0,cur=1,cnt=0;
        for(int i=1;i<s.length();i++){
            if(s.charAt(i)==s.charAt(i-1)) cur++;
            else{
                pre=cur;
                cur=1;
            }
            if(pre>=cur) cnt++;
        }
        return cnt;
    }
}

438. 找到字符串中所有字母异位词  滑动窗口



字符串压缩和解码
38. 外观数列
class Solution {
    public String countAndSay(int n) {
        if(n==1) return "1";
        String pre=countAndSay(n-1);
        StringBuilder res=new StringBuilder();
        for(int l=0,r=0;r<pre.length();r++){
            if(r==pre.length()-1||pre.charAt(r)!=pre.charAt(r+1)){
                res.append(r-l+1).append(pre.charAt(r));
                l=r+1;
            }
        }
        return res.toString();
    }
}

830. 较大分组的位置
class Solution {
    public List<List<Integer>> largeGroupPositions(String s) {
        List<List<Integer>> res=new ArrayList<>();
        for(int l=0,r=0;r<s.length();r++){
            if(r==s.length()-1||s.charAt(r)!=s.charAt(r+1)){
                if(r-l>=2) res.add(new ArrayList<>(Arrays.asList(l,r)));
                l=r+1;
            }
        }
        return res;
    }
}

443. 压缩字符串
class Solution {
    public int compress(char[] chars) {
        int idx=0;
        for(int l=0,r=0;r<=chars.length;r++){
            if(r==chars.length||chars[r]!=chars[l]){
                chars[idx++]=chars[l];
                if(r-l>=2){
                    for(char c:String.valueOf(r-l).toCharArray()) chars[idx++]=c;
                }
                l=r;
            }
        }
        return idx;
    }
}

394. 字符串解码 栈




字符串反转、翻转和旋转
//String是immutable，所以需要用char array来做。
344. 反转字符串
["h","e","l","l","o"]
["o","l","l","e","h"]
class Solution {
    public void reverseString(char[] s) {
        int l=0,r=s.length-1;
        while(l<r){
            char c=s[l];
            s[l++]=s[r];
            s[r--]=c;
        }
    }
}

class Solution {
    public void reverseString(char[] s) {
        dfs(s,0,s.length-1);
    }
    public void dfs(char[] s,int l,int r){
        if(l>r) return;
        char t=s[l];
        s[l]=s[r];
        s[r]=t;
        dfs(s,l+1,r-1);
    }
}

541. 反转字符串 II  每隔2k反转k
class Solution {
    public String reverseStr(String s, int k) {
        char[] res=s.toCharArray();
        for(int i=0;i<res.length;i+=2*k){
            int j=i+k-1;
            if(i+k>res.length) j=res.length-1;
            reverse(res,i,j);
        }
        return String.valueOf(res);
    }
    public void reverse(char[] s,int i,int j){
        while(i<j){
            char c=s[i];
            s[i++]=s[j];
            s[j--]=c;
        }
    }
}

557. 反转字符串中的单词 III
"I have a dog"
"I evah a god"
//O(n)  不算toCharArray的话O(1)
//字符串中的每个字符，要么在O(1)的时间内被交换到相应的位置，要么因为是空格而保持不动。
class Solution {
    public String reverseWords(String s) {
        char[] words=s.toCharArray();
        int i=0,len=s.length();
        while(i<len){
            int start=i;
            while(i<len&&words[i]!=' ') i++;
            for(int l=start,r=i-1;l<r;l++,r--) swap(words,l,r);
            if(i<len&&words[i]==' ') i++;
        }
        return String.valueOf(words);
    }
    public void swap(char[] words,int i,int j){
        char temp=words[i];
        words[i]=words[j];
        words[j]=temp;
    }
}

class Solution {
    public String reverseWords(String s) {
        char[] words=s.toCharArray();
        int len=s.length();
        for(int l=0,r=0;r<=len;r++){
            if(r==len||words[r]==' '){
                reverse(words,l,r-1);
                l=r+1;
            }
        }
        return String.valueOf(words);
    }
    public void reverse(char[] words,int i,int j){
        while(i<j){
            char temp=words[i];
            words[i++]=words[j];
            words[j--]=temp;
        }
    }
}

186. 翻转字符串里的单词 II
["t","h","e"," ","s","k","y"," ","i","s"," ","b","l","u","e"]
["b","l","u","e"," ","i","s"," ","s","k","y"," ","t","h","e"]
class Solution {
    public char[] reverseWords(char[] words) {
        int len=s.length();
        reverse(words,0,len-1);
        for(int l=0,r=0;r<=len;r++){
            if(r==len||words[r]==' '){
                reverse(words,l,r-1);
                l=r+1;
            }
        }
        return words;
    }
    public void reverse(char[] words,int i,int j){
        while(i<j){
            char temp=words[i];
            words[i++]=words[j];
            words[j--]=temp;
        }
    }
}

151. 翻转字符串里的单词  可能多余空格
"  the sky   is blue  "
"blue is sky the"
//O(n)  不算toCharArray的话O(1)
class Solution {
    public String reverseWords(String s) {
        if(s==null||s.isEmpty()) return s;
        char[] words=s.toCharArray();
        int len=s.length(),idx=0;
        reverse(words,0,len-1);
        for(int l=0;l<len;l++){
            if(words[l]!=' '){
                if(idx>0) words[idx++]=' ';
                int r=l;
                while(r<len&&words[r]!=' ') words[idx++]=words[r++];
                reverse(words,idx-(r-l),idx-1);
                l=r;
            }
        }
        return String.valueOf(Arrays.copyOf(words,idx));
    }
    public void reverse(char[] words,int i,int j){
        while(i<j){
            char temp=words[i];
            words[i++]=words[j];
            words[j--]=temp;
        }
    }
}

345.反转字符串中的元音字母
class Solution {
    public String reverseVowels(String s) {
        Set<Character> set=new HashSet<>(Arrays.asList('a','e','i','o','u','A','E','I','O','U'));
        char[] chars=s.toCharArray();
        int i=0,j=s.length()-1;
        while(i<j){
            if(set.contains(chars[i])&&set.contains(chars[j])){
                swap(chars,i,j);
                i++;
                j--;
            }
            else if(set.contains(chars[i])) j--;
            else i++;
        }
        return new String(chars);
    }
    public void swap(char[] strs,int i,int j){
        char temp=strs[i];
        strs[i]=strs[j];
        strs[j]=temp;
    }
}

796. 旋转字符串
class Solution {
    public boolean rotateString(String s1, String s2) {
        if(s1.length()!=s2.length()) return false;
        return (s1+s1).contains(s2);
    }
}

字符串循环移位包含
//编程之美 3.1
s1进行循环移位的结果是 s1s1 的子字符串，因此只要判断 s2 是否是 s1s1 的子字符串即可。

字符串循环移位
//编程之美 2.17
将 abcd123 中的 abcd 和 123 单独翻转，得到 dcba321，然后对整个字符串进行翻转，得到 123abcd。




替换字符串
剑指 Offer 05. 替换空格
class Solution {
    public String replaceSpace(String s) {
        int n=s.length(),cnt=0;
        for(int i=0;i<n;i++) if(s.charAt(i)==' ') cnt++;
        char[] res=Arrays.copyOf(s.toCharArray(),n+2*cnt);

        for(int i=n-1,j=res.length-1;i<j;i--,j--){
            char c=s.charAt(i);
            if(c!=' ') res[j]=c;
            else{
                res[j]='0';
                res[j-1]='2';
                res[j-2]='%';
                j-=2;
            }
        }
        return String.valueOf(res);
    }
}

面试题 01.03. URL化
class Solution {
    public String replaceSpaces(String s, int length) {
        char[] res=new char[length*3];
        int idx=0;
        for(int i=0;i<length;i++){
            char c=s.charAt(i);
            if(c!=' ') res[idx++]=c;
            else{
                res[idx++]='%';
                res[idx++]='2';
                res[idx++]='0';
            }
        }
        return String.valueOf(res,0,idx);
    }
}

424. 替换后的最长重复字符  滑动窗口






字符串转换
8. 字符串转换整数 (atoi)
class Solution {
    public int myAtoi(String str) {
        str=str.trim();
        if(str.length()==0) return 0;
        if(!Character.isDigit(str.charAt(0))&&str.charAt(0)!='-'&&str.charAt(0)!='+') return 0;

        boolean is_negetive=false;
        if(str.charAt(0)=='-') is_negetive=true;

        int res=0,i=0;
        if(str.charAt(0)=='-'||str.charAt(0)=='+') i++;
        for(;i<str.length()&&Character.isDigit(str.charAt(i));i++){
            int digit=str.charAt(i)-'0';
            if(res>(Integer.MAX_VALUE-digit)/10) return is_negetive?Integer.MIN_VALUE:Integer.MAX_VALUE;
            res=res*10+digit;
        }
        return is_negetive?-res:res;
    }
}

剑指 Offer 20. 表示数值的字符串
class Solution {
    public boolean isNumber(String s) {
        if(s==null||s.length()==0) return false;
        boolean hasNum=false,hasOp=false,hasDot=false,hasE=false;

        int i=0;
        while(i<s.length()&&s.charAt(i)==' ') i++;
        for(;i<s.length();i++){
            char c=s.charAt(i);
            if(c>='0'&&c<='9') hasNum=true;
            else if(c=='.'){
                if(hasDot||hasE) return false;
                hasDot=true;
            }else if(c=='-'||c=='+'){
                if(hasOp||hasDot||hasNum) return false;
                hasOp=true;
            }else if(c=='e'||c=='E'){
                if(hasE||!hasNum) return false;
                hasE=true;
                hasNum=false;hasOp=false;hasDot=false;
            }else if(c==' ') break;
            else return false;
        }
        while(i<s.length()&&s.charAt(i)==' ') i++;
        return hasNum&&i==s.length();
    }
}

//https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/solution/mian-shi-ti-20-biao-shi-shu-zhi-de-zi-fu-chuan-y-2/
//有限状态自动机
class Solution {
    public boolean isNumber(String s) {
        Map[] state={
            new HashMap<>() {{ put(' ', 0); put('s', 1); put('d', 2); put('.', 4); }}, // 0.
            new HashMap<>() {{ put('d', 2); put('.', 4); }},                           // 1.
            new HashMap<>() {{ put('d', 2); put('.', 3); put('e', 5); put(' ', 8); }}, // 2.
            new HashMap<>() {{ put('d', 3); put('e', 5); put(' ', 8); }},              // 3.
            new HashMap<>() {{ put('d', 3); }},                                        // 4.
            new HashMap<>() {{ put('s', 6); put('d', 7); }},                           // 5.
            new HashMap<>() {{ put('d', 7); }},                                        // 6.
            new HashMap<>() {{ put('d', 7); put(' ', 8); }},                           // 7.
            new HashMap<>() {{ put(' ', 8); }}                                         // 8.
        };
        int p=0;
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i),cur;
            if(c>='0'&&c<='9') cur='d';
            else if(c=='+'||c=='-') cur='s';
            else if(c=='e'||c=='E') cur='e';
            else if(c=='.'||c==' ') cur=c;
            else cur='?';
            if(!state[p].containsKey(cur)) return false;
            p=(int)state[p].get(cur);
        }
        return p==2||p==3||p==7||p==8;
    }
}

13. 罗马数字转整数
class Solution {
    public int romanToInt(String s) {
        Map<Character,Integer> map=new HashMap<>(){{put('I',1);put('V',5);put('X',10);put('L',50);put('C',100);put('D',500);put('M',1000);}};
        int pos=0,neg=0;
        for(int i=1;i<s.length();i++){
            if(map.get(s.charAt(i-1))<map.get(s.charAt(i))) neg-=map.get(s.charAt(i-1));
            else pos+=map.get(s.charAt(i-1));
        }
        pos+=map.get(s.charAt(s.length()-1));
        return pos+neg;
    }
}

12. 整数转罗马数字
class Solution {
    public String intToRoman(int num) {
        int[] nums={1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] romans={"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        StringBuilder res=new StringBuilder();
        for(int i=0;i<nums.length;i++){
            while(nums[i]<=num){
                res.append(romans[i]);
                num-=nums[i];
            }
        }
        return res.toString();
    }
}

273. 整数转换英文表示
class Solution {
    String[] num1=new String[]{"","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten",
                        "Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen","Twenty"};
    String[] num2=new String[]{"","","Twenty","Thirty","Forty","Fifty","Sixty","Seventy","Eighty","Ninety"};
    String[] num3=new String[]{"","Thousand","Million","Billion"};//前面增加空字符串,方便单词数字与下标对应
    public String numberToWords(int num) {
        if(num==0) return "Zero";
        String res="";
        for(int i=0;num!=0;i++){
            if(num%1000>0) res=dfs(num%1000)+" "+num3[i]+" "+res;
            num/=1000;
        }
        return res.trim();
    }
    public String dfs(int num){
        if(num<20) return num1[num];
        else if(num<100) return (num2[num/10]+" "+dfs(num%10)).trim();
        else return (dfs(num/100)+" Hundred "+dfs(num%100)).trim();
    }
}






字符串游戏
6. Z 字形变换
class Solution {
    public String convert(String s, int numRows) {
        if(numRows<2) return s;
        StringBuilder[] rows=new StringBuilder[numRows];
        for(int i=0;i<numRows;i++) rows[i]=new StringBuilder();
        int MOD=2*numRows-2;
        for(int i=0;i<s.length();i++){
            int idx=i%MOD;
            rows[Math.min(idx,MOD-idx)].append(s.charAt(i));
        }
        return String.join("", rows);
    }
}

657. 机器人能否返回原点
class Solution {
    public boolean judgeCircle(String moves) {
        int x=0,y=0;
        for(int i=0;i<moves.length();i++){
            switch(moves.charAt(i)){
                case 'U':y++;break;
                case 'D':y--;break;
                case 'L':x--;break;
                case 'R':x++;break;
            }
        }
        return x==0&&y==0;
    }
}

class Solution {
    public boolean judgeCircle(String moves) {
        int[] cnts=new int[26];
        for(int i=0;i<moves.length();i++) cnts[moves.charAt(i)-'A']++;
        return cnts['U'-'A']==cnts['D'-'A']&&cnts['L'-'A']==cnts['R'-'A'];
    }
}

面试题 16.22. 兰顿蚂蚁
class Solution {
    public List<String> printKMoves(int K) {
        int[][] dirs={{0, -1}, {-1, 0}, {0, 1}, {1, 0}};
        char[] direction={'L','U','R','D'};
        Set<String> set=new HashSet<>();
        int x=0,y=0,dir=2;
        while(K-->0){
            String cur=x+" "+y;
            if(set.contains(cur)){
                dir=(dir+3)%4;
                set.remove(cur);
            }else{
                dir=(dir+1)%4;
                set.add(cur);
            }
            x+=dirs[dir][0];
            y+=dirs[dir][1];
        }

        int left=y,top=x,right=y,bottom=x;
        for(String s:set) {
            int s0=Integer.parseInt(s.split(" ")[0]),s1=Integer.parseInt(s.split(" ")[1]);
            left=Math.min(s1,left);
            top=Math.min(s0,top);
            right=Math.max(s1,right);
            bottom=Math.max(s0,bottom);
        }
        char[][] grid=new char[bottom-top+1][right-left+1];
        for(char[] g:grid) Arrays.fill(g,'_');
        for(String s:set){
            int s0=Integer.parseInt(s.split(" ")[0]),s1=Integer.parseInt(s.split(" ")[1]);
            grid[s0-top][s1-left]='X';
        }
        grid[x-top][y-left]=direction[dir];

        List<String> res=new ArrayList<>();
        for(char[] g:grid) res.add(String.valueOf(g));
        return res;
    }
}


单词
524.通过删除字母匹配到字典里最长单词
class Solution {
    public String findLongestWord(String s, List<String> d) {
        String res="";
        for(String cur:d){
            for(int i=0,j=0;i<s.length()&&j<cur.length();i++){
                if(s.charAt(i)==cur.charAt(j)) j++;
                if(j==cur.length()){
                    if(cur.length()>res.length()||cur.length()==res.length()&&cur.compareTo(res)<0) res=cur;
                }
            }
        }
        return res;
    }
}

720. 词典中最长的单词 TrieTree

面试题 17.15. 最长单词 TrieTree

819. 最常见的单词
class Solution {
    public String mostCommonWord(String paragraph, String[] banned) {
        paragraph+='.';
        Map<String,Integer> map=new HashMap<>();
        Set<String> ban=new HashSet<>(Arrays.asList(banned));

        String res="";
        int max=0;
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<paragraph.length();i++){
            char c=paragraph.charAt(i);
            if(Character.isLetter(c)) sb.append(Character.toLowerCase(c));
            else{
                String cur=sb.toString();
                if(cur.length()>0&&!ban.contains(cur)){
                    map.put(cur,map.getOrDefault(cur,0)+1);
                    if(max<map.get(cur)){
                        max=map.get(cur);
                        res=cur;
                    }
                }
                sb=new StringBuilder();
            }
        }
        return res;
    }
}

面试题 17.22. 单词转换
class Solution {
    List<String> res=new ArrayList<>();
    public List<String> findLadders(String beginWord, String endWord, List<String> wordList) {
        if(!wordList.contains(endWord)) return res;
        Set<String> visited=new HashSet<>();
        List<String> list=new ArrayList<>();
        list.add(beginWord);
        visited.add(beginWord);
        if(backtrack(beginWord,endWord,wordList,list,visited)) return res;
        return new ArrayList<>();
    }
    private boolean backtrack(String word, String endWord, List<String> wordList, List<String> list, Set<String> visited) {
        if(word.equals(endWord)) {
            res=new ArrayList<>(list);
            return true;
        }
        for(String w:wordList){
            if(!visited.contains(w)&&oneCharDiff(w,word)){
                list.add(w);
                visited.add(w);
                if(backtrack(w,endWord,wordList,list,visited)) return true;
                list.remove(w);
            }
        }
        return false;
    }
    private boolean oneCharDiff(String word1, String word2) {
        if(word1.length()!=word2.length()) return false;
        int cnt=0;
        for(int i=0;i<word1.length();i++){
            if(word1.charAt(i)!=word2.charAt(i)) cnt++;
            if(cnt>=2) return false;
        }
        return true;
    }
}

面试题 17.11. 单词距离/245. 最短单词距离 III
class Solution {
    public int findClosest(String[] words, String word1, String word2) {
        int l=-1,r=-1,min=words.length;
        for(int i=0;i<words.length;i++){
            if(words[i].equals(word1)) l=i;
            if(words[i].equals(word2)) r=i;
            if(l!=-1&&r!=-1) min=Math.min(min,Math.abs(r-l));
        }
        return min;
    }
}

class Solution {
    public int findClosest(String[] words, String word1, String word2) {
        HashMap<String,List<Integer>> map=new HashMap<>();
        for(int i=0;i<words.length;i++){
            List<Integer> list=map.getOrDefault(words[i],new ArrayList<>());
            list.add(i);
            map.put(words[i], list);
        }
        List<Integer> l1=map.get(word1),l2=map.get(word2);
        int i=0,j=0,min=words.length;
        while(i<l1.size()&&j<l2.size()){
            int left=l1.get(i),right=l2.get(j);
            min=Math.min(min,Math.abs(right-left));
            if(left<right) i++;
            else j++;
        }
        return min;
    }
}






唯一字符
387. 字符串中的第一个唯一字符
class Solution {
    public int firstUniqChar(String s) {
        int[] dic=new int[26];
        char[] arr=s.toCharArray();
        for(char c:arr) dic[c-'a']++;
        for(int i=0;i<arr.length;i++){
            if(dic[arr[i]-'a']==1) return i;
        }
        return -1;
    }
}

class Solution {
    public int firstUniqChar(String s) {
        Map<Character,Boolean> map=new HashMap<>();
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            map.put(c,!map.containsKey(c));
        }
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            if(map.get(c)) return i;
        }
        return -1;
    }
}


剑指 Offer 50. 第一个只出现一次的字符
class Solution {
    public char firstUniqChar(String s) {
        int[] map=new int[26];
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            map[c-'a']++;
        }
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            if(map[c-'a']==1) return c;
        }
        return ' ';
    }
}

面试题 01.01. 判定字符是否唯一  Bitwise



字符串运算
415. 字符串相加 数学

43. 字符串相乘 数学

计算器






回文
9. 回文数
class Solution {
    public boolean isPalindrome(int x) {
        if(x<0||(x%10==0&&x!=0)) return false;
        int reverse=0;
        while(x>reverse){
            reverse=reverse*10+x%10;
            x/=10;
        }
        return x==reverse||x==reverse/10;
    }
}

409. 最长回文串
class Solution {
    public int longestPalindrome(String s) {
        int[] cnts=new int[58];
        for(int i=0;i<s.length();i++) cnts[s.charAt(i)-'A']++;

        int res=0,max=0;
        for(int i:cnts) res+=i-(i&1);
        return res==s.length()?res:res+1;
    }
}

面试题 01.04. 回文排列
class Solution {
    public boolean canPermutePalindrome(String s) {
        int[] dic=new int[128];
        int cnt=0;
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            if((++dic[c]&1)==1) cnt++;
            else cnt--;
        }
        return cnt<=1;
    }
}

680. 验证回文字符串 Ⅱ
//O(n) O(1)
class Solution {
    public boolean validPalindrome(String s) {
        for(int l=0,r=s.length()-1;l<r;l++,r--)
            if(s.charAt(l)!=s.charAt(r)) return isPalindrome(s,l,r-1)||isPalindrome(s,l+1,r);
        return true;
    }
    public boolean isPalindrome(String s, int l, int r) {
        for(int i=l,j=r;i<j;i++,j--){
            if(s.charAt(i)!=s.charAt(j)) return false;
        }
        return true;
    }
}

125. 验证回文串
class Solution {
    public boolean isPalindrome(String s) {
        if(s.isEmpty()) return true;
        s=s.toLowerCase();
        for(int i=0,j=s.length()-1;i<j;i++,j--){
            while(i<j&&!Character.isLetterOrDigit(s.charAt(i))) i++;
            while(i<j&&!Character.isLetterOrDigit(s.charAt(j))) j--;
            if(s.charAt(i)!=s.charAt(j)) return false;
        }
        return true;
    }
}

1616. 分割两个字符串得到回文串
class Solution {
    public boolean checkPalindromeFormation(String a, String b) {
        return check(a, b)||check(b, a);
    }
    public boolean isP(String s,int l,int r){
        for(int i=l,j=r;i<j;i++,j--){
            if(s.charAt(i)!=s.charAt(j)) return false;
        }
        return true;
    }
    public boolean check(String a, String b){
        for(int i=0,j=b.length()-1;i<j;i++,j--){
            if(a.charAt(i)!=b.charAt(j)){
                return isP(a,i,j)||isP(b,i,j);
            }
        }
        return true;
    }
}

647. 回文子串
class Solution {
    public int countSubstrings(String s) {
        if(s.length()<2) return s.length();
        int cnt=0;
        for(int i=0;i<s.length();i++){
            cnt+=getP(s,i,i);
            cnt+=getP(s,i,i+1);
        }
        return cnt;
    }
    public int getP(String s,int l,int r) {
        int cnt=0;
        for(int n=s.length();l>=0&&r<n&&s.charAt(l)==s.charAt(r);) {
            l--; r++;
            cnt++;
        }
        return cnt;
    }
}

//链表
234. 回文链表
class Solution {
    ListNode left;
    public boolean isPalindrome(ListNode head) {
        left=head;
        return dfs(head);
    }
    public boolean dfs(ListNode right){
        if(right==null) return true;
        boolean res=dfs(right.next);
        res=res&&(left.val==right.val);
        left=left.next;
        return res;
    }
}

//边遍历边翻转
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null||head.next==null) return true;
        ListNode pre=null,cur=null;
        ListNode slow=head,fast=head;
        while(fast!=null&&fast.next!=null){
            cur=slow;
            slow=slow.next;
            fast=fast.next.next;

            cur.next=pre;
            pre=cur;
        }
        if(fast!=null) slow=slow.next;
        while(cur!=null){
            if(cur.val!=slow.val) return false;
            cur=cur.next;
            slow=slow.next;
        }
        return true;
    }
}

//https://leetcode-cn.com/problems/palindrome-linked-list/solution/ha-xi-bian-li-yi-ci-jiu-xing-by-tcan1993/
//回文串的正反哈希相等, 英文字母串通常选seed=131
//哈希公式: hash=hash*seed+val, 其中seed是一个质数, val是节点值
class Solution {
    public boolean isPalindrome(ListNode head) {
        long hash1=0,hash2=0,pro=1,seed=(long)(1e9+7);
        ListNode p=head;
        while(p!=null){
            hash1=hash1*seed+p.val;
            hash2=hash2+pro*p.val;
            pro*=seed;
            p=p.next;
        }
        return hash1==hash2;
    }
}

//区间dp
5. 最长回文子串
//中心扩散
class Solution {
    public String longestPalindrome(String s) {
        if(s.length()<2) return s;
        int n=s.length();
        int len=1;
        String res=s.substring(0,1);
        for(int i=0;i<n-1;i++){
            String odd=getP(s,i,i);
            String even=getP(s,i,i+1);
            String max=odd.length()>even.length()?odd:even;
            if(max.length()>len){
                len=max.length();
                res=max;
            }
        }
        return res;
    }
    public String getP(String s,int l,int r) {
        for(int n=s.length();l>=0&&r<n&&s.charAt(l)==s.charAt(r);) {
            l--;
            r++;
        }
        return s.substring(l+1,r);
    }
}

//O(n^3) O(1)
class Solution {
    public String longestPalindrome(String s) {
        if(s.length()<2) return s;
        int n=s.length();
        char[] word=s.toCharArray();
        int l=0,len=1;
        for(int i=1;i<word.length;i++){
            for(int j=0;j<i;j++){
                if(valid(word,j,i)&&len<i-j+1){
                    len=i-j+1;
                    l=j;
                }
            }
        }
        return s.substring(l,l+len);
    }
    public boolean valid(char[] word,int l,int r) {
        for(;l<r;l++,r--) {
            if(word[l]!=word[r]) return false;
        }
        return true;
    }
}

//O(n^2) O(n^2)
class Solution {
    public String longestPalindrome(String s) {
        if(s.length()<2) return s;
        int n=s.length();
        int l=0,len=1;
        boolean[][] dp=new boolean[n][n];
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(s.charAt(i)==s.charAt(j)&&(i-j+1<=3||dp[j+1][i-1])){
                    dp[j][i]=true;
                    if(len<i-j+1){
                        len=i-j+1;
                        l=j;
                    }
                }
            }
        }
        return s.substring(l,l+len);
    }
}

516. 最长回文子序列
class Solution {
    public int longestPalindromeSubseq(String s) {
        int[][] dp=new int[s.length()][s.length()];
        for(int i=0;i<s.length();i++) dp[i][i]=1;
        for(int i=s.length()-1;i>=0;i--){
            for(int j=i+1;j<s.length();j++){
                if(s.charAt(i)==s.charAt(j)) dp[i][j]=dp[i+1][j-1]+2;
                else dp[i][j]=Math.max(dp[i+1][j],dp[i][j-1]);
            }
        }
        return dp[0][s.length()-1];
    }
}

1312. 让字符串成为回文串的最少插入次数
class Solution {
    public int minInsertions(String s) {
        int[][] dp=new int[s.length()][s.length()];
        for(int i=s.length()-2;i>=0;i--){
            for(int j=i+1;j<s.length();j++){
                if(s.charAt(i)==s.charAt(j)) dp[i][j]=dp[i+1][j-1];
                else dp[i][j]=Math.min(dp[i+1][j],dp[i][j-1])+1;
            }
        }
        return dp[0][s.length()-1];
    }
}

214. 最短回文串
//https://leetcode-cn.com/problems/shortest-palindrome/solution/c-li-yong-kmpsuan-fa-xiang-xi-tui-dao-zhuan-hua-gu/
//找到dcba的后缀和abcd的前缀重合的部分, 让重合部分最大即可
//所求前缀是不能超过中点的，用一个特殊字符隔开
class Solution {
    public String shortestPalindrome(String s) {
        String re=new StringBuilder(s).reverse().toString();
        int sn=s.length();
        s=s+"#"+re;
        int n=s.length();
        int[] next=new int[n];
        next[0]=-1;
        for(int i=1,j=-1;i<n;i++){
            while(j>-1&&s.charAt(i)!=s.charAt(j+1)) j=next[j];
            if(s.charAt(i)==s.charAt(j+1)) j++;
            next[i]=j;
        }
        return s.substring(sn+1,2*sn-next[n-1])+s.substring(0,sn);
    }
}