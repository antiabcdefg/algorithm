X数之和

1. 两数之和
//O(n) O(n)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(target-nums[i])) return new int[]{map.get(target-nums[i]),i};
            map.put(nums[i],i);
        }
        return new int[0];
    }
}

167. 两数之和 II - 输入有序数组
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int l=0,r=nums.length-1;
        while(l<r){
            if(nums[l]==(target-nums[r])) return new int[]{l+1,r+1};
            if(nums[l]<target-nums[r]) l++;
            else r--;
        }
        return new int[0];
    }
}

170. 两数之和III - 数据结构设计
class TwoSum {
    Map<Integer,Integer> map=new HashMap<>();
    public void add(int num){
        map.put(num,map.getOrDefault(num,0)+1);
    }
    public boolean find(int value){
        for(Integer i:map.keySet()){
            int j=value-i;
            if(j==i&&map.get(i)>1||j!=i&&map.containsKey(j)) return true;
        }
        return false;
    }
}

class TwoSum {
    Set<Integer> sum=new HashSet<>();
    List<Integer> list=new ArrayList<>();
    public void add(int num){
        for(int i:list) sum.add(i+num);
        list.add(num);
    }
    public boolean find(int value){
        return sum.contains(value);
    }
}

653. 两数之和 IV - 输入 BST
class Solution {
    Set<Integer> set=new HashSet<>();
    public boolean findTarget(TreeNode root, int k) {
        if(root==null) return false;
        if(set.contains(k-root.val)) return true;
        set.add(root.val);
        return findTarget(root.left,k)||findTarget(root.right,k);
    }
}

面试题 16.24. 数对和
class Solution {
    public List<List<Integer>> pairSums(int[] nums, int target) {
        Map<Integer,Integer> map=new HashMap<>();
        List<List<Integer>> res=new ArrayList<>();
        for(int n:nums){
            if(map.containsKey(target-n)&&map.get(target-n)>0){
                res.add(Arrays.asList(target-n,n));
                map.put(target-n,map.get(target-n)-1);
            }
            else map.put(n,map.getOrDefault(n,0)+1);
        }
        return res;
    }
}

class Solution {
    public List<List<Integer>> pairSums(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res=new ArrayList<>();
        int l=0,r=nums.length-1;
        while(l<r){
            int cur=nums[l]+nums[r];
            if(cur<target) l++;
            else if(cur>target) r--;
            else res.add(Arrays.asList(nums[l++],nums[r--]));
        }
        return res;
    }
}

1679. K 和数对的最大数目
class Solution {
    public int maxOperations(int[] nums, int k) {
        Arrays.sort(nums);
        int res=0,l=0,r=nums.length-1;
        while(l<r){
            int cur=nums[l]+nums[r];
            if(cur<k) l++;
            else if(cur>k) r--;
            else{
                res++;
                l++;r--;
            }
        }
        return res;
    }
}

Two Sum - Unique Pairs  两数之和等于target的不重复组合数目
class Solution {
    public int uniquePairs(int[] nums,int target){
        Set<Integer> set=new HashSet<>();
        Set<Integer> visited=new HashSet<>();
        int cnt=0;
        for(int n:nums){
            if(set.contains(target-n)&&!visited.contains(n)){
                cnt++;
                visited.add(n);
                visited.add(target-n);
            }else set.add(n);
        }
        return cnt;
    }
}

class Solution {
    public int uniquePairs(int[] nums,int target){
        if(nums==null||nums.length<2) return 0;

        Arrays.sort(nums);
        Set<Integer> set=new HashSet<>();
        int cnt=0,i=0,j=nums.length-1;
        while(i<j){
            while(i<j&&set.contains(nums[i])) i++;
            while(i<j&&set.contains(nums[j])) j--;

            if(i<j){
                int cur=nums[i]+nums[j];
                if(cur<target) i++;
                else if(cur>target) j--;
                else{
                    cnt++;
                    set.add(nums[i]);
                    set.add(nums[j]);
                }
            }
        }
        return cnt;
    }
}

1711. 大餐计数
class Solution {
    public int countPairs(int[] deliciousness) {
        Map<Integer,Integer> map=new HashMap<>();
        long res=0;
        for(int d:deliciousness){
            for(int j=0;j<22;j++){
                int target=1<<j;
                if(d<=target&&map.containsKey(target-d)) res+=map.get(target-d);
            }
            map.put(d,map.getOrDefault(d,0)+1);
        }
        return (int)(res%(int)(1e9+7));
    }
}

两数之和大于target
//O(nlogn) O(1)
class Solution {
    public int twoSum(int[] nums, int target) {
        if(nums==null||nums.length<2) return cnt;
        Arrays.sort(nums);
        int cnt=0;
        int i=0,j=nums.length-1;
        while(i<j){
            if(nums[i]+nums[j]>target) cnt+=j-- -i;
            else i++;
        }
        return cnt;
    }
}

两数之和最接近target
//O(nlogn) O(1)
class Solution {
    public int twoSumClosest(int[] nums, int target) {
        if(nums==null||nums.length<2) return target;
        Arrays.sort(nums);
        int res=Integer.MAX_VALUE,l=0,r=nums.length-1;
        while(l<r){
            int sum=nums[l]+nums[r],cur=Math.abs(target-sum);
            if(cur==0) return 0;
            res=Math.min(res,cur);
            if(sum<=target) l++;
            else r--;
        }
        return res;
    }
}

面试题 16.06. 最小差
class Solution {
    public int smallestDifference(int[] a, int[] b) {
        Arrays.sort(a);Arrays.sort(b);
        int res=Integer.MIN_VALUE;
        for(int i=0,j=0;i<a.length&&j<b.length;){
            res=Math.max(res,-Math.abs(a[i]-b[j]));//解决溢出,负数域>正数域。
            if(a[i]<b[j]) i++;
            else j++;
        }
        return -res;
    }
}

两数之差等于target的坐标 无重复
class Solution {
    public int[] twoDif(int[] nums, int target) {
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i]-target)) return new int[]{map.get(nums[i]-target)+1,i+1};
            else if(map.containsKey(nums[i]+target)) return new int[]{map.get(nums[i]+target)+1,i+1};
            map.put(nums[i],i);
        }
        return new int[0];
    }
}

15. 三数之和  和为0
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        int n=nums.length;
        if(nums==null||n<=2) return res;
        Arrays.sort(nums); //O(nlogn)

        for(int i=0;i<n-2&&nums[i]<=0;i++){
            if(i>0&&nums[i-1]==nums[i]) continue;
            int l=i+1,r=n-1,target=-nums[i];
            while(l<r){
                int cur=nums[l]+nums[r];
                if(cur<target) l++;
                else if(cur>target) r--;
                else{
                    res.add(Arrays.asList(nums[i],nums[l++],nums[r--]));
                    while(l<r&&nums[l]==nums[l-1]) l++;
                    while(l<r&&nums[r]==nums[r+1]) r--;
                }
            }
        }
        return res;
    }
}

16. 最接近的三数之和
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int res=nums[0]+nums[1]+nums[2];
        for(int i=0;i<nums.length-2;i++) {
            int l=i+1,r=nums.length-1;
            while(l<r){
                int sum=nums[i]+nums[l]+nums[r],cur=Math.abs(sum-target);
                if(cur==0) return target;
                if(cur<Math.abs(res-target)) res=sum;
                if(sum<=target) l++;
                else r--;
            }
        }
        return res;
    }
}

18. 四数之和
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res=new ArrayList<>();
        if(nums==null||nums.length<4) return res;
        Arrays.sort(nums);
        for(int i=0;i<nums.length-3;i++){
            if(i>0&&nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<nums.length-2;j++){
                if(j>i+1&&nums[j]==nums[j-1]) continue;
                int l=j+1,r=nums.length-1;
                while(l<r){
                    int sum=nums[i]+nums[j]+nums[l]+nums[r];
                    if(sum<target) l++;
                    else if(sum>target) r--;
                    else{
                        res.add(Arrays.asList(nums[i],nums[j],nums[l++],nums[r--]));
                        while(l<r&&nums[l]==nums[l-1]) l++;
                        while(l<r&&nums[r]==nums[r+1]) r--;
                    }
                }
            }
        }
        return res;
    }
}

454. 四数相加 II
class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        int res=0;
        Map<Integer,Integer> map=new HashMap<>();
        for(int a:A) for(int b:B) map.put(a+b,map.getOrDefault(a+b,0)+1);
        for(int c:C) for(int d:D) res+=map.getOrDefault(-c-d,0);
        return res;
    }
}


飞机放电影(无序)
class Solution {
    public int[] flightDetails(int[] arr,int k){
        k-=30;
        Arrays.sort(arr);
        int max=0,l=0,r=arr.length-1;
        int[] res=new int[2];
        while(l<r){
            if(k>=arr[l]+arr[r]){
                max=Math.max(max,arr[l]+arr[r]);
                res[0]=arr[l];
                res[1]=arr[r];
                l++;
            }else r--;
        }
        return res;
    }
}

Optimal Utilization
返回最接近<=target
a = [[1, 3], [2, 5], [3, 7], [4, 10]]
b = [[1, 2], [2, 3], [3, 4], [4, 5]]
target = 10
class Solution {
    public List<int[]> getPairs(int[][] a, int[][] b, int target) {
        if(a.length==0||b.length==0) return null;
        Arrays.sort(a,(x, y)->x[1]-y[1]);
        Arrays.sort(b,(x, y)->x[1]-y[1]);

        List<int[]> res=new ArrayList<>();
        int max=Integer.MIN_VALUE;
        for(int l=0,r=b.length-1;l<a.length&&r>=0;){
            int sum=a[l][1]+b[r][1];
            if(target>=sum){
                if(target==sum) res.add(new int[]{a[l][0],b[r][0]});
                else if(max<sum){
                    res.clear();
                    max=sum;
                    res.add(new int[]{a[l][0],b[r][0]});
                }
                l++;
            }else r--;
        }
        return res;
    }
}