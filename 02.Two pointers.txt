
快慢指针

287.寻找重复数
//相遇时slow走过n，fast走过2n，开头距离端口m，slow距离端口n-m，2n-n=n是环长，则fast继续走m到达端口
//O(n) O(1)
class Solution {
    public int findDuplicate(int[] nums) {
        int slow=0,fast=0;
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        slow=0;
        while(slow!=fast){
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
}

//Hash
202. 快乐数
class Solution {
    public boolean isHappy(int n) {
        int slow=n,fast=getSum(n);
        while(slow!=1&&slow!=fast){
            slow=getSum(slow);
            fast=getSum(getSum(fast));
        }
        return slow==1;
    }
    public int getSum(int n){
        int sum=0;
        while(n>0){
            sum+=(n%10)*(n%10);
            n/=10;
        }
        return sum;
    }
}



剑指 Offer 21. 调整数组顺序使奇数位于偶数前面
class Solution {
    public int[] exchange(int[] nums) {
        int l=0,r=nums.length-1;
        while(l<r){
            while(l<r&&nums[l]%2==1) l++;
            while(l<r&&nums[r]%2==0) r--;
            int t=nums[l];
            nums[l++]=nums[r];
            nums[r--]=t;
        }
        return nums;
    }
}


74. 搜索二维矩阵
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0||matrix[0].length==0) return false;
        int n=matrix.length,m=matrix[0].length;

        int l=0,r=m-1;
        while(l<n&&r>=0){
            if(matrix[l][r]<target) l++;
            else if(matrix[l][r]>target) r--;
            else return true;
        }
        return false;
    }
}

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0) return false;
        int n=matrix.length,m=matrix[0].length;

        int l=0,r=n*m-1;
        while(l<=r){
            int mid=l+((r-l)>>1);
            if(matrix[mid/m][mid%m]<target) l=mid+1;
            else if(matrix[mid/m][mid%m]>target) r=mid-1;
            else return true;
        }
        return false;
    }
}

240. 搜索二维矩阵 II
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0||matrix[0].length==0) return false;
        int n=matrix.length,m=matrix[0].length;

        int l=0,r=m-1;
        while(l<n&&r>=0){
            if(matrix[l][r]<target) l++;
            else if(matrix[l][r]>target) r--;
            else return true;
        }
        return false;
    }
}

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0||matrix[0].length==0) return false;
        int n=matrix.length,m=matrix[0].length;
        for(int i=0;i<n;i++){
            if(matrix[i][0]>target) break;
            if(matrix[i][m-1]<target) continue;
            int l=0,r=m-1;
            while(l<=r){
                int mid=l+r>>>1;
                if(matrix[i][mid]<target) l=mid+1;
                else if(matrix[i][mid]>target) r=mid-1;
                else return true;
            }
        }
        return false;
    }
}

378. 有序矩阵中第K小的元素
class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n=matrix.length,m=matrix[0].length;
        int l=matrix[0][0],r=matrix[n-1][m-1];
        while(l<r){
            int mid=l+((r-l)>>>1);
            int cnt=0;
            for(int i=0;i<n;i++) for(int j=0;j<m&&matrix[i][j]<=mid;j++) cnt++;
            if(cnt<k) l=mid+1;
            else r=mid;
        }
        return l;
    }
}



