模拟一般哈希/哈希碰撞解决
(1)拉链法
memset(h, - 1, sizeof h);
int n = 100003; //大于100000的第一个质数
int h[n], vals[n], nexts[n], idx;

void insert(int x){
    int k = (x % n + n) % n;//c++中负数取模还是负数 所以要先取模在+n在取模
    vals[idx] = x;
    nexts[idx] = h[k];
    h[k] = idx++;
}

bool find(int x){
    int k = (x % n + n) % n;
    for(int i=h[k];i!=-1;i=nexts[i])
        if(vals[i]==x) return true;
    return false;
}

(2)开放寻址法 只开一个数组 一般为题目给的2~3倍

添加 如果冲突则往后移动一个坑位查看冲突嘛，如果冲突继续后移
查找 类似添加，找不到后移一个
删除 开一个bool数组

int h[n];

// 如果x在哈希表中,返回x的下标; 如果x不在哈希表中,返回x应该插入的位置
int find(int x){
    int k = (x%n+n)%n;
    while(h[k]!=null&&h[k]!=x){
        k++;
        if(k==n) k=0;
    }
    return k;
}


字符串哈希
核心思想: 将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低
小技巧: 取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果

typedef unsigned long long ULL;
const int N=100010,seed=131;
ULL h[N], p[N]; // h[k]存储字符串前k个字母的哈希值, p[k]存储 seed^k mod 2^64

// 初始化
p[0] = 1;
for (int i = 1; i <= n; i ++ ){
    h[i] = h[i - 1] * seed + str[i-1];
    p[i] = p[i - 1] * seed;
}

// 计算子串 str[l ~ r] 的哈希值
ULL get(int l, int r){
    return h[r] - (h[l - 1] * p[r - l + 1]);
}

https://blog.csdn.net/pengwill97/article/details/80879387



219. 存在重复元素 II
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])&&i-map.get(nums[i])<=k) return true;
            else map.put(nums[i],i);
        }
        return false;
    }
}

220. 存在重复元素 III
class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        TreeSet<Long> win=new TreeSet<>();
        for(int i=0;i<nums.length;i++){
            Long ceiling=win.ceiling((long)nums[i]-(long)t);//大于等于
            if(ceiling!=null&&ceiling<=((long)nums[i]+(long)t)) return true;
            win.add((long)nums[i]);
            if(win.size()==k+1) win.remove((long)nums[i-k]);
        }
        return false;
    }
}


349. 两个数组的交集
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set=new HashSet<>();
        for(int i:nums1) set.add(i);

        int[] res=new int[nums2.length];
        int idx=0;
        for(int i:nums2){
            if(set.remove(i)) res[idx++]=i;
        }
        return Arrays.copyOf(res,idx);
    }
}

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set=new HashSet<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i=0,j=0;
        while(i<nums1.length&&j<nums2.length){
            if(nums1[i]==nums2[j]){
                set.add(nums1[i]);
                i++;
                j++;
            }else if(nums1[i]<nums2[j]) i++;
            else j++;
        }

        int[] res=new int[set.size()];
        int idx=0;
        for(int s:set){
            res[idx++]=s;
        }
        return res;
    }
}

350. 两个数组的交集 II
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer,Integer> map=new HashMap<>();
        for(int i:nums2) map.put(i,map.getOrDefault(i,0)+1);

        int[] res=new int[nums1.length];
        int idx=0;
        for(int i:nums1){
            if(map.getOrDefault(i,0)>0) {
                res[idx++]=i;
                map.put(i,map.getOrDefault(i,0)-1);
            }
        }
        return Arrays.copyOf(res,idx);
    }
}

class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> list=new ArrayList<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i=0,j=0;
        while(i<nums1.length&&j<nums2.length){
            if(nums1[i]==nums2[j]){
                list.add(nums1[i]);
                i++;
                j++;
            }else if(nums1[i]<nums2[j]) i++;
            else j++;
        }

        int[] res=new int[list.size()];
        int idx=0;
        for(int s:list){
            res[idx++]=s;
        }
        return res;
    }
}

1640. 能否连接形成数组
class Solution {
    public boolean canFormArray(int[] arr, int[][] pieces) {
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<pieces.length;i++) map.put(pieces[i][0],i);

        int i=0;
        while(i<arr.length){
            if(!map.containsKey(arr[i])) return false;
            int[] p=pieces[map.get(arr[i])];
            for(int j=0;j<p.length;i++,j++){
                if(arr[i]!=p[j]) return false;
            }
        }
        return true;
    }
}

面试题 16.15. 珠玑妙算
class Solution {
    public int[] masterMind(String solution, String guess) {
        int[] map=new int[26];
        for(int i=0;i<solution.length();i++) map[solution.charAt(i)-'A']++;
        int x=0,y=0;
        for(int i=0;i<solution.length();i++){
            if(solution.charAt(i)==guess.charAt(i)) x++;
            if(map[guess.charAt(i)-'A']>0){
                map[guess.charAt(i)-'A']--;
                y++;
            }
        }
        return new int[]{x,y-x};
    }
}

299. 猜数字游戏
class Solution {
    public String getHint(String secret, String guess) {
        int[] map=new int[10];
        for(int i=0;i<secret.length();i++) map[secret.charAt(i)-'0']++;
        int bull=0,cow=0;
        for(int i=0;i<secret.length();i++){
            if(secret.charAt(i)==guess.charAt(i)) bull++;
            if(map[guess.charAt(i)-'0']-->0) cow++;
        }
        return bull+"A"+(cow-bull)+"B";
    }
}

383. 赎金信
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        Map<Character,Integer> map=new HashMap<>();
        for(int i=0;i<magazine.length();i++)
            map.put(magazine.charAt(i),map.getOrDefault(magazine.charAt(i),0)+1);

        for(int i=0;i<ransomNote.length();i++){
            if(map.getOrDefault(ransomNote.charAt(i),0)>0) map.put(ransomNote.charAt(i),map.get(ransomNote.charAt(i))-1);
            else return false;
        }
        return true;
    }
}

class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] map=new int[26];
        for(int i=0;i<magazine.length();i++)
            map[magazine.charAt(i)-'a']++;

        for(int i=0;i<ransomNote.length();i++){
            if(map[ransomNote.charAt(i)-'a']>0) map[ransomNote.charAt(i)-'a']--;
            else return false;
        }
        return true;
    }
}

575. 分糖果
class Solution {
    public int distributeCandies(int[] candies) {
        Set<Integer> set=new HashSet<>();
        for(int i:candies) set.add(i);

        int half=candies.length/2;
        return set.size()<half?set.size():half;
    }
}

class Solution {
    public int distributeCandies(int[] candies) {
        Arrays.sort(candies);
        int cnt=1;
        for(int i=1;i<candies.length&&cnt<candies.length/2;i++){
            if(candies[i]!=candies[i-1]) cnt++;
        }
        return cnt;
    }
}

//双指针
202. 快乐数
class Solution {
    public boolean isHappy(int n) {
        Set<Integer> set=new HashSet<>();
        while(n!=1&&set.add(n)){
            n=getSum(n);
        }
        return n==1;
    }
    public boolean isHappy(int n) {
        Set<Integer> cycleMembers=new HashSet<>(Arrays.asList(4, 16, 37, 58, 89, 145, 42, 20));
        while(n!=1&&!cycleMembers.contains(n)) n=getSum(n);
        return n==1;
    }
    public int getSum(int n){
        int sum=0;
        while(n>0){
            sum+=(n%10)*(n%10);
            n/=10;
        }
        return sum;
    }
}

535. TinyURL 的加密与解密
public class Codec {
    String alphabet="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    Map<String,String> map=new HashMap<>();
    public String encode(String longUrl) {
        String key="";
        do{
            StringBuilder sb=new StringBuilder();
            for(int i=0;i<6;i++) sb.append(alphabet.charAt(new Random().nextInt(62)));
            key=sb.toString();
        }while(map.containsKey(key));
        map.put(key,longUrl);
        return "http://tinyurl.com/"+key;
    }
    public String decode(String shortUrl) {
        return map.get(shortUrl.replace("http://tinyurl.com/",""));
    }
}

149. 直线上最多的点数
class Solution {
    public int maxPoints(int[][] points) {
        if(points.length<3) return points.length;
        int res=0;
        for(int i=0;i<points.length;i++){
            Map<Double,Integer> map=new HashMap<>();
            int same=1,max=0;
            for(int j=i+1;j<points.length;j++){
                if(points[i][0]==points[j][0]&&points[i][1]==points[j][1]) same++;
                else{
                    double rate=Integer.MAX_VALUE;
                    if(points[i][0]!=points[j][0]) rate=(double)(points[i][1]-points[j][1])*1000/(double)(points[i][0]-points[j][0])*1000+0.0;
                    map.put(rate,map.getOrDefault(rate,0)+1);
                    max=Math.max(max,map.get(rate));
                }
            }
            res=Math.max(res,max+same);
        }
        return res;
    }
}