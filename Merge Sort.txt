//双指针
88. 合并两个有序数组
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int p=m-- + n-- -1;
        while(m>=0&&n>=0){
            nums1[p--]=nums1[m]>nums2[n]?nums1[m--]:nums2[n--];
        }
        while(n>=0){
            nums1[p--] = nums2[n--];
        }
    }
}

归并排序
//O(nlogn) O(n)
class Solution {
    public int[] sortArray(int[] nums) {
        mergesort(nums,0,nums.length-1);
        return nums;
    }
    public void mergesort(int[] nums,int l,int r){
        if(l==r) return;
        int m=l+((r-l)>>1);
        mergesort(nums,l,m);
        mergesort(nums,m+1,r);
        merge(nums,l,m,r);
    }
    public void merge(int[] nums,int l,int m,int r){
        int[] res=new int[r-l+1];
        int p1=l,p2=m+1,i=0;
        while(p1<=m&&p2<=r) res[i++]=nums[p1]<nums[p2]?nums[p1++]:nums[p2++];
        while(p1<=m) res[i++]=nums[p1++];
        while(p2<=r) res[i++]=nums[p2++];

        for(int j=0;j<res.length;j++) nums[l+j]=res[j];
    }
}

148. 排序链表
//O(nlogn) O(1)
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null) return head;
        ListNode mid=middleNode(head);
        ListNode r=mid.next;
        mid.next=null;
        return merge(sortList(head),sortList(r));
    }
    public ListNode middleNode(ListNode head) {
        if(head==null||head.next==null) return head;
        ListNode slow=head,fast=head.next.next;
        while(fast!=null&&fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public ListNode merge(ListNode l,ListNode r){
        ListNode dummy=new ListNode(-1);
        ListNode p=dummy;
        while(l!=null&&r!=null){
            if(l.val<r.val){
                p.next=l;
                l=l.next;
            }else{
                p.next=r;
                r=r.next;
            }
            p=p.next;
        }
        p.next=l==null?r:l;
        return dummy.next;
    }
}

23. 合并K个排序链表
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null||lists.length==0) return null;
        return sort(lists,0,lists.length - 1);
    }

    public ListNode sort(ListNode[] lists,int left,int right){
        if(left==right) return lists[left];
        int mid=left+((right-left)>>1);
        ListNode l1=sort(lists,left,mid);
        ListNode l2=sort(lists,mid+1,right);
        return merge(l1,l2);
    }
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null||lists.length==0) return null;
        int end=lists.length-1;
        while(end>0){
            int start=0;
            while(start<end){
                lists[start]=merge(lists[start],lists[end]);
                start++;
                end--;
            }
        }
        return lists[0];
    }

    public ListNode merge(ListNode l1,ListNode l2){
        if(l1==null) return l2;
        if(l2==null) return l1;
        if(l1.val<l2.val){
            l1.next=merge(l1.next,l2);
            return l1;
        }else{
            l2.next=merge(l1,l2.next);
            return l2;
        }
    }
    public ListNode merge(ListNode l1,ListNode l2){
        ListNode dummy=new ListNode(-1);
        ListNode p=dummy;
        while(l1&&l2){
            if(l1.val<l2.val) {
                p.next=l1;
                l1=l1.next;
            }else{
                p.next=l2;
                l2=l2.next;
            }
            p=p.next;
        }
        p.next=l1?l1:l2;
        return dummy.next;
}

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null||lists.length==0) return null;
        PriorityQueue<ListNode> minHeap=new PriorityQueue<>(lists.length,new Comparator<ListNode>(){
            public int compare(ListNode l1,ListNode l2){
                if(l1.val<l2.val) return -1;
                else if(l1.val>l2.val) return 1;
                else return 0;
            }
        });
        for(ListNode l:lists){
            if(l!=null) minHeap.add(l);
        }
        ListNode dummy=new ListNode(0);
        ListNode p=dummy;
        while(!minHeap.isEmpty()){
            p.next=minHeap.poll();
            p=p.next;
            if(p.next!=null) minHeap.add(p.next);
        }
        return dummy.next;
    }
}

剑指 Offer 51. 数组中的逆序对
//O(nlogn) O(n)
class Solution {
    public int reversePairs(int[] nums) {
        int n=nums.length;
        if(n<2) return 0;

        int[] temp=new int[n];
        return reversePairs(nums,0,n-1,temp);
    }
    public int reversePairs(int[] nums,int l,int r,int[] temp){
        if(l==r) return 0;
        int m=l+(r-l)/2;
        int left=reversePairs(nums,l,m,temp);
        int right=reversePairs(nums,m+1,r,temp);
        if(nums[m]<=nums[m+1]) return left+right;
        int cross=merge(nums,l,m,r,temp);
        return left+right+cross;
    }
    public int merge(int[] nums,int l,int m,int r,int[] temp){
        for(int i=l;i<=r;i++) temp[i]=nums[i];
        int p1=l,p2=m+1;
        int cnt=0;
        for(int i=l;i<=r;i++){
            if(p1==m+1) nums[i]=temp[p2++];
            else if(p2==r+1) nums[i]=temp[p1++];
            else if(temp[p1]<=temp[p2]) nums[i]=temp[p1++];
            else{
                nums[i]=temp[p2++];
                cnt+=m+1-p1;
            }
        }
        return cnt;
    }
}

//binary indexed tree
315. 计算右侧小于当前元素的个数
class Solution {
    public List<Integer> countSmaller(int[] nums) {
        int n=nums.length;
        if(n==0) return Arrays.asList();
        int[] indexes=new int[n];
        for(int i=0;i<n;i++) indexes[i]=i;
        int[] res=new int[n];
        int[] temp=new int[n];
        mergesort(nums,0,n-1,indexes,temp,res);
        return Arrays.stream(res).boxed().collect(Collectors.toList());
    }
    public void mergesort(int[] nums,int l,int r,int[] indexes,int[] temp,int[] res){
        if(l==r) return;
        int m=l+(r-l)/2;
        mergesort(nums,l,m,indexes,temp,res);
        mergesort(nums,m+1,r,indexes,temp,res);
        if(nums[indexes[m]]<=nums[indexes[m+1]]) return;
        merge(nums,l,m,r,indexes,temp,res);
    }
    public void merge(int[] nums,int l,int m,int r,int[] indexes,int[] temp,int[] res){
        for(int i=l;i<=r;i++) temp[i]=indexes[i];
        int p1=l,p2=m+1;
        for(int i=l;i<=r;i++){
            if(p1>m) indexes[i]=temp[p2++];
            else if(p2>r){
                indexes[i]=temp[p1++];
                res[indexes[i]]+=r-m;
            }
            else if(nums[temp[p1]]<=nums[temp[p2]]){
                indexes[i]=temp[p1++];
                res[indexes[i]]+=p2-m-1;
            }
            else indexes[i]=temp[p2++];
        }
    }
}